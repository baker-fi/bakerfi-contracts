/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Leverage,
  LeverageInterface,
} from "../../../contracts/libraries/Leverage";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "loanToValue",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "nrLoops",
        type: "uint8",
      },
    ],
    name: "calculateLeverageRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101b661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063537b132d1461003a575b600080fd5b61004d6100483660046100ba565b61005f565b60405190815260200160405180910390f35b6000838060015b8460ff168160ff16116100af576000620186a0610083888561010f565b61008d919061012c565b9050610099818561014e565b93509150806100a781610161565b915050610066565b509095945050505050565b6000806000606084860312156100cf57600080fd5b8335925060208401359150604084013560ff811681146100ee57600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610126576101266100f9565b92915050565b60008261014957634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610126576101266100f9565b600060ff821660ff8103610177576101776100f9565b6001019291505056fea26469706673582212203554afd03793160fe721732fc97feaa39b0437ad52934a64044d2ce05f6cc07064736f6c63430008120033";

type LeverageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LeverageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Leverage__factory extends ContractFactory {
  constructor(...args: LeverageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Leverage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Leverage__factory {
    return super.connect(runner) as Leverage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LeverageInterface {
    return new Interface(_abi) as LeverageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Leverage {
    return new Contract(address, _abi, runner) as unknown as Leverage;
  }
}
