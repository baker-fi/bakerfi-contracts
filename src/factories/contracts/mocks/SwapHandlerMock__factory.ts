/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SwapHandlerMock,
  SwapHandlerMockInterface,
} from "../../../contracts/mocks/SwapHandlerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "asset0",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "asset1",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "underlyingIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "underlyingOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "mode",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct ISwapHandler.SwapParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052620186a0600255620186a060035534801561001e57600080fd5b5060405161094938038061094983398101604081905261003d9161008a565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100bd565b80516001600160a01b038116811461008557600080fd5b919050565b6000806040838503121561009d57600080fd5b6100a68361006e565b91506100b46020840161006e565b90509250929050565b61087d806100cc6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fbd30fe714610030575b600080fd5b61004361003e3660046106e1565b610055565b60405190815260200160405180910390f35b600080546001600160a01b031661006f6020840184610723565b6001600160a01b031614806100a357506001546001600160a01b03166100986020840184610723565b6001600160a01b0316145b6100ea5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21024b7383aba102a37b5b2b760691b60448201526064015b60405180910390fd5b6000546001600160a01b03166101066040840160208501610723565b6001600160a01b0316148061013d57506001546001600160a01b03166101326040840160208501610723565b6001600160a01b0316145b6101805760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21027baba383aba102a37b5b2b760611b60448201526064016100e1565b61018d6020830183610723565b6001600160a01b03166101a66040840160208501610723565b6001600160a01b0316036101f45760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b21029bbb0b83832b2102a37b5b2b760591b60448201526064016100e1565b81604001356000036102f857610228333060608501356102176020870187610723565b6001600160a01b03169291906103d6565b60035460025461023c90606085013561074c565b6102469190610777565b9050806102596040840160208501610723565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561029f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c39190610799565b10156102ce57600080fd5b6102f333826102e36040860160208701610723565b6001600160a01b03169190610447565b919050565b608082013561030d6040840160208501610723565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610799565b101561038257600080fd5b60006003546002546103949190610777565b6103a2906080850135610777565b90506103b73330836102176020880188610723565b6103d03360808501356102e36040870160208801610723565b50919050565b6040516001600160a01b03808516602483015283166044820152606481018290526104419085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261047c565b50505050565b6040516001600160a01b03831660248201526044810182905261047790849063a9059cbb60e01b9060640161040a565b505050565b60006104d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105519092919063ffffffff16565b90508051600014806104f25750808060200190518101906104f291906107b2565b6104775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100e1565b60606105608484600085610568565b949350505050565b6060824710156105c95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100e1565b600080866001600160a01b031685876040516105e591906107f8565b60006040518083038185875af1925050503d8060008114610622576040519150601f19603f3d011682016040523d82523d6000602084013e610627565b606091505b509150915061063887838387610643565b979650505050505050565b606083156106b25782516000036106ab576001600160a01b0385163b6106ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100e1565b5081610560565b61056083838151156106c75781518083602001fd5b8060405162461bcd60e51b81526004016100e19190610814565b6000602082840312156106f357600080fd5b813567ffffffffffffffff81111561070a57600080fd5b820160c0818503121561071c57600080fd5b9392505050565b60006020828403121561073557600080fd5b81356001600160a01b038116811461071c57600080fd5b808202811582820484141761077157634e487b7160e01b600052601160045260246000fd5b92915050565b60008261079457634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156107ab57600080fd5b5051919050565b6000602082840312156107c457600080fd5b8151801515811461071c57600080fd5b60005b838110156107ef5781810151838201526020016107d7565b50506000910152565b6000825161080a8184602087016107d4565b9190910192915050565b60208152600082518060208401526108338160408501602087016107d4565b601f01601f1916919091016040019291505056fea2646970667358221220c498893f99224c60a4629f2363be1f2180fda7f47a0a06ed4e6f81854bc1652d64736f6c63430008120033";

type SwapHandlerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapHandlerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapHandlerMock__factory extends ContractFactory {
  constructor(...args: SwapHandlerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    asset0: AddressLike,
    asset1: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(asset0, asset1, overrides || {});
  }
  override deploy(
    asset0: AddressLike,
    asset1: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(asset0, asset1, overrides || {}) as Promise<
      SwapHandlerMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapHandlerMock__factory {
    return super.connect(runner) as SwapHandlerMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapHandlerMockInterface {
    return new Interface(_abi) as SwapHandlerMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SwapHandlerMock {
    return new Contract(address, _abi, runner) as unknown as SwapHandlerMock;
  }
}
