/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISwapHandler,
  ISwapHandlerInterface,
} from "../../../../contracts/interfaces/core/ISwapHandler";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "underlyingIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "underlyingOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "mode",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct ISwapHandler.SwapParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISwapHandler__factory {
  static readonly abi = _abi;
  static createInterface(): ISwapHandlerInterface {
    return new Interface(_abi) as ISwapHandlerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ISwapHandler {
    return new Contract(address, _abi, runner) as unknown as ISwapHandler;
  }
}
