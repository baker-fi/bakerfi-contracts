/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "AAVEv3Strategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AAVEv3Strategy__factory>;
    getContractFactory(
      name: "BalanceFlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceFlashLender__factory>;
    getContractFactory(
      name: "LaundromatVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LaundromatVault__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "ServiceRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ServiceRegistry__factory>;
    getContractFactory(
      name: "UniV3Swapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Swapper__factory>;
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IPoolV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolV3__factory>;
    getContractFactory(
      name: "IFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient__factory>;
    getContractFactory(
      name: "IFlashLoans",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoans__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IServiceRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IServiceRegistry__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "ISwapHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapHandler__factory>;
    getContractFactory(
      name: "ICurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: "IDSAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSAuth__factory>;
    getContractFactory(
      name: "IDSAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSAuthority__factory>;
    getContractFactory(
      name: "IDSGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSGuard__factory>;
    getContractFactory(
      name: "IDSGuardFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSGuardFactory__factory>;
    getContractFactory(
      name: "IDSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSProxy__factory>;
    getContractFactory(
      name: "IStETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStETH__factory>;
    getContractFactory(
      name: "IWStETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWStETH__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IQuoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuoter__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "Leverage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Leverage__factory>;
    getContractFactory(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: "AaveV3PoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV3PoolMock__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "MockFlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFlashLender__factory>;
    getContractFactory(
      name: "SwapHandlerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapHandlerMock__factory>;
    getContractFactory(
      name: "WstETHMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHMock__factory>;
    getContractFactory(
      name: "WstETHToETHOracleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHToETHOracleMock__factory>;
    getContractFactory(
      name: "IChainlinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAggregator__factory>;
    getContractFactory(
      name: "WstETHToETHOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHToETHOracle__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "IERC4626",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "AAVEv3Strategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AAVEv3Strategy>;
    getContractAt(
      name: "BalanceFlashLender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BalanceFlashLender>;
    getContractAt(
      name: "LaundromatVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LaundromatVault>;
    getContractAt(
      name: "Lock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "ServiceRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ServiceRegistry>;
    getContractAt(
      name: "UniV3Swapper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniV3Swapper>;
    getContractAt(
      name: "IPoolAddressesProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "IPoolV3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolV3>;
    getContractAt(
      name: "IFlashLoanRecipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanRecipient>;
    getContractAt(
      name: "IFlashLoans",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoans>;
    getContractAt(
      name: "IOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IServiceRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IServiceRegistry>;
    getContractAt(
      name: "IStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "ISwapHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapHandler>;
    getContractAt(
      name: "ICurvePool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurvePool>;
    getContractAt(
      name: "IDSAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSAuth>;
    getContractAt(
      name: "IDSAuthority",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSAuthority>;
    getContractAt(
      name: "IDSGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSGuard>;
    getContractAt(
      name: "IDSGuardFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSGuardFactory>;
    getContractAt(
      name: "IDSProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSProxy>;
    getContractAt(
      name: "IStETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStETH>;
    getContractAt(
      name: "IWStETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWStETH>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IQuoter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuoter>;
    getContractAt(
      name: "ISwapRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "Leverage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Leverage>;
    getContractAt(
      name: "WETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>;
    getContractAt(
      name: "AaveV3PoolMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV3PoolMock>;
    getContractAt(
      name: "ERC20Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "MockFlashLender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFlashLender>;
    getContractAt(
      name: "SwapHandlerMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapHandlerMock>;
    getContractAt(
      name: "WstETHMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WstETHMock>;
    getContractAt(
      name: "WstETHToETHOracleMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WstETHToETHOracleMock>;
    getContractAt(
      name: "IChainlinkAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkAggregator>;
    getContractAt(
      name: "WstETHToETHOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WstETHToETHOracle>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower>;
    deployContract(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender>;
    deployContract(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "AAVEv3Strategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AAVEv3Strategy>;
    deployContract(
      name: "BalanceFlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceFlashLender>;
    deployContract(
      name: "LaundromatVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LaundromatVault>;
    deployContract(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "ServiceRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ServiceRegistry>;
    deployContract(
      name: "UniV3Swapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Swapper>;
    deployContract(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider>;
    deployContract(
      name: "IPoolV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolV3>;
    deployContract(
      name: "IFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient>;
    deployContract(
      name: "IFlashLoans",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoans>;
    deployContract(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "IServiceRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IServiceRegistry>;
    deployContract(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "ISwapHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapHandler>;
    deployContract(
      name: "ICurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool>;
    deployContract(
      name: "IDSAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSAuth>;
    deployContract(
      name: "IDSAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSAuthority>;
    deployContract(
      name: "IDSGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSGuard>;
    deployContract(
      name: "IDSGuardFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSGuardFactory>;
    deployContract(
      name: "IDSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSProxy>;
    deployContract(
      name: "IStETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStETH>;
    deployContract(
      name: "IWStETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWStETH>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IQuoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuoter>;
    deployContract(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: "Leverage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Leverage>;
    deployContract(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH>;
    deployContract(
      name: "AaveV3PoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV3PoolMock>;
    deployContract(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "MockFlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFlashLender>;
    deployContract(
      name: "SwapHandlerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapHandlerMock>;
    deployContract(
      name: "WstETHMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHMock>;
    deployContract(
      name: "WstETHToETHOracleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHToETHOracleMock>;
    deployContract(
      name: "IChainlinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAggregator>;
    deployContract(
      name: "WstETHToETHOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHToETHOracle>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC3156FlashBorrower",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower>;
    deployContract(
      name: "IERC3156FlashLender",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender>;
    deployContract(
      name: "IERC4626",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "AAVEv3Strategy",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AAVEv3Strategy>;
    deployContract(
      name: "BalanceFlashLender",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceFlashLender>;
    deployContract(
      name: "LaundromatVault",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LaundromatVault>;
    deployContract(
      name: "Lock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "ServiceRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ServiceRegistry>;
    deployContract(
      name: "UniV3Swapper",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Swapper>;
    deployContract(
      name: "IPoolAddressesProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider>;
    deployContract(
      name: "IPoolV3",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolV3>;
    deployContract(
      name: "IFlashLoanRecipient",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient>;
    deployContract(
      name: "IFlashLoans",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoans>;
    deployContract(
      name: "IOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "IServiceRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IServiceRegistry>;
    deployContract(
      name: "IStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "ISwapHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapHandler>;
    deployContract(
      name: "ICurvePool",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool>;
    deployContract(
      name: "IDSAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSAuth>;
    deployContract(
      name: "IDSAuthority",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSAuthority>;
    deployContract(
      name: "IDSGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSGuard>;
    deployContract(
      name: "IDSGuardFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSGuardFactory>;
    deployContract(
      name: "IDSProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSProxy>;
    deployContract(
      name: "IStETH",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStETH>;
    deployContract(
      name: "IWStETH",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWStETH>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IQuoter",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuoter>;
    deployContract(
      name: "ISwapRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "IUniswapV3Pool",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: "Leverage",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Leverage>;
    deployContract(
      name: "WETH",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH>;
    deployContract(
      name: "AaveV3PoolMock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV3PoolMock>;
    deployContract(
      name: "ERC20Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "MockFlashLender",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFlashLender>;
    deployContract(
      name: "SwapHandlerMock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapHandlerMock>;
    deployContract(
      name: "WstETHMock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHMock>;
    deployContract(
      name: "WstETHToETHOracleMock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHToETHOracleMock>;
    deployContract(
      name: "IChainlinkAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAggregator>;
    deployContract(
      name: "WstETHToETHOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WstETHToETHOracle>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
  }
}
