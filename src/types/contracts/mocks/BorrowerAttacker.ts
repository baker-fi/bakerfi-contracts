/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface BorrowerAttackerInterface extends Interface {
  getFunction(
    nameOrSignature: 'CALLBACK_SUCCESS' | 'borrowed' | 'flashme' | 'initialize' | 'onFlashLoan',
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;

  encodeFunctionData(functionFragment: 'CALLBACK_SUCCESS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowed', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'flashme', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'onFlashLoan',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'CALLBACK_SUCCESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flashme', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onFlashLoan', data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BorrowerAttacker extends BaseContract {
  connect(runner?: ContractRunner | null): BorrowerAttacker;
  waitForDeployment(): Promise<this>;

  interface: BorrowerAttackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  CALLBACK_SUCCESS: TypedContractMethod<[], [string], 'view'>;

  borrowed: TypedContractMethod<[token: AddressLike], [bigint], 'view'>;

  flashme: TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;

  initialize: TypedContractMethod<
    [flashLender: AddressLike, istrategy: AddressLike],
    [void],
    'nonpayable'
  >;

  onFlashLoan: TypedContractMethod<
    [
      arg0: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
    ],
    [string],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'CALLBACK_SUCCESS'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'borrowed',
  ): TypedContractMethod<[token: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'flashme',
  ): TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'initialize',
  ): TypedContractMethod<[flashLender: AddressLike, istrategy: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'onFlashLoan',
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
    ],
    [string],
    'nonpayable'
  >;

  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
