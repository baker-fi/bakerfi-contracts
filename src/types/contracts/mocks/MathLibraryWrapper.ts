/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface MathLibraryWrapperInterface extends Interface {
  getFunction(
    nameOrSignature: 'mulDiv' | 'mulDivDown' | 'mulDivUp' | 'toDecimals',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'mulDiv',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'mulDivDown',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mulDivUp',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'toDecimals',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'mulDiv', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mulDivDown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mulDivUp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toDecimals', data: BytesLike): Result;
}

export interface MathLibraryWrapper extends BaseContract {
  connect(runner?: ContractRunner | null): MathLibraryWrapper;
  waitForDeployment(): Promise<this>;

  interface: MathLibraryWrapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  mulDiv: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, denominator: BigNumberish, roundUp: boolean],
    [bigint],
    'view'
  >;

  mulDivDown: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, denominator: BigNumberish],
    [bigint],
    'view'
  >;

  mulDivUp: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, denominator: BigNumberish],
    [bigint],
    'view'
  >;

  toDecimals: TypedContractMethod<
    [value: BigNumberish, from: BigNumberish, to: BigNumberish],
    [bigint],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'mulDiv',
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, denominator: BigNumberish, roundUp: boolean],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'mulDivDown',
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, denominator: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'mulDivUp',
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, denominator: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'toDecimals',
  ): TypedContractMethod<
    [value: BigNumberish, from: BigNumberish, to: BigNumberish],
    [bigint],
    'view'
  >;

  filters: {};
}
