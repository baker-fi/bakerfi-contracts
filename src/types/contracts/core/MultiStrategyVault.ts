/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export declare namespace IVault {
  export type RebalanceCommandStruct = {
    action: BigNumberish;
    data: BytesLike;
  };

  export type RebalanceCommandStructOutput = [action: bigint, data: string] & {
    action: bigint;
    data: string;
  };
}

export interface MultiStrategyVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'CHANGE_WEIGHTS'
      | 'DEFAULT_ADMIN_ROLE'
      | 'HARVEST_VAULT'
      | 'MAX_TOTAL_WEIGHT'
      | 'REBALANCE_STRATEGIES'
      | '_initializeVaultSettings'
      | 'addStrategy'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositNative'
      | 'enableAccount'
      | 'getFeeReceiver'
      | 'getMaxDeposit'
      | 'getPerformanceFee'
      | 'getRoleAdmin'
      | 'getWithdrawalFee'
      | 'grantRole'
      | 'hasRole'
      | 'increaseAllowance'
      | 'initialize'
      | 'isAccountEnabled'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'pause'
      | 'paused'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'rebalance'
      | 'redeem'
      | 'redeemNative'
      | 'removeStrategy'
      | 'renounceRole'
      | 'revokeRole'
      | 'setFeeReceiver'
      | 'setMaxDeposit'
      | 'setPerformanceFee'
      | 'setWeights'
      | 'setWithdrawalFee'
      | 'strategies'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenPerAsset'
      | 'totalAssets'
      | 'totalSupply'
      | 'totalWeight'
      | 'transfer'
      | 'transferFrom'
      | 'unpause'
      | 'weights'
      | 'withdraw'
      | 'withdrawNative',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AccountWhiteList'
      | 'AddStrategy'
      | 'Approval'
      | 'Deposit'
      | 'FeeReceiverChanged'
      | 'Initialized'
      | 'MaxDepositChanged'
      | 'MaxDifferenceUpdated'
      | 'Paused'
      | 'PerformanceFeeChanged'
      | 'RemoveStrategy'
      | 'RoleAdminChanged'
      | 'RoleGranted'
      | 'RoleRevoked'
      | 'Transfer'
      | 'Unpaused'
      | 'WeightsUpdated'
      | 'Withdraw'
      | 'WithdrawalFeeChanged',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'CHANGE_WEIGHTS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'HARVEST_VAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_TOTAL_WEIGHT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REBALANCE_STRATEGIES', values?: undefined): string;
  encodeFunctionData(functionFragment: '_initializeVaultSettings', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addStrategy', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, AddressLike]): string;
  encodeFunctionData(functionFragment: 'depositNative', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'enableAccount', values: [AddressLike, boolean]): string;
  encodeFunctionData(functionFragment: 'getFeeReceiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMaxDeposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPerformanceFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getWithdrawalFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, string, string, AddressLike, AddressLike[], BigNumberish[], AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'isAccountEnabled', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, AddressLike]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previewDeposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewMint', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewRedeem', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'rebalance',
    values: [IVault.RebalanceCommandStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish, AddressLike, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'redeemNative', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'removeStrategy', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'setFeeReceiver', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'setMaxDeposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWeights', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'strategies', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenPerAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weights', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, AddressLike, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawNative', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'CHANGE_WEIGHTS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'HARVEST_VAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_TOTAL_WEIGHT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REBALANCE_STRATEGIES', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_initializeVaultSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositNative', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPerformanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWithdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isAccountEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemNative', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWeights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenPerAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawNative', data: BytesLike): Result;
}

export namespace AccountWhiteListEvent {
  export type InputTuple = [account: AddressLike, enabled: boolean];
  export type OutputTuple = [account: string, enabled: boolean];
  export interface OutputObject {
    account: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddStrategyEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish,
  ];
  export type OutputTuple = [sender: string, owner: string, assets: bigint, shares: bigint];
  export interface OutputObject {
    sender: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReceiverChangedEvent {
  export type InputTuple = [value: AddressLike];
  export type OutputTuple = [value: string];
  export interface OutputObject {
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxDepositChangedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxDifferenceUpdatedEvent {
  export type InputTuple = [maxDifference: BigNumberish];
  export type OutputTuple = [maxDifference: bigint];
  export interface OutputObject {
    maxDifference: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceFeeChangedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveStrategyEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
  export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeightsUpdatedEvent {
  export type InputTuple = [weights: BigNumberish[]];
  export type OutputTuple = [weights: bigint[]];
  export interface OutputObject {
    weights: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint,
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalFeeChangedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiStrategyVault extends BaseContract {
  connect(runner?: ContractRunner | null): MultiStrategyVault;
  waitForDeployment(): Promise<this>;

  interface: MultiStrategyVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  CHANGE_WEIGHTS: TypedContractMethod<[], [bigint], 'view'>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], 'view'>;

  HARVEST_VAULT: TypedContractMethod<[], [bigint], 'view'>;

  MAX_TOTAL_WEIGHT: TypedContractMethod<[], [bigint], 'view'>;

  REBALANCE_STRATEGIES: TypedContractMethod<[], [bigint], 'view'>;

  _initializeVaultSettings: TypedContractMethod<[], [void], 'nonpayable'>;

  addStrategy: TypedContractMethod<[strategy: AddressLike], [void], 'nonpayable'>;

  allowance: TypedContractMethod<[owner: AddressLike, spender: AddressLike], [bigint], 'view'>;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  asset: TypedContractMethod<[], [string], 'view'>;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], 'view'>;

  convertToAssets: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  convertToShares: TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;

  decimals: TypedContractMethod<[], [bigint], 'view'>;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  deposit: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    'nonpayable'
  >;

  depositNative: TypedContractMethod<[receiver: AddressLike], [bigint], 'payable'>;

  enableAccount: TypedContractMethod<
    [account: AddressLike, enabled: boolean],
    [void],
    'nonpayable'
  >;

  getFeeReceiver: TypedContractMethod<[], [string], 'view'>;

  getMaxDeposit: TypedContractMethod<[], [bigint], 'view'>;

  getPerformanceFee: TypedContractMethod<[], [bigint], 'view'>;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], 'view'>;

  getWithdrawalFee: TypedContractMethod<[], [bigint], 'view'>;

  grantRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;

  hasRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], 'view'>;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  initialize: TypedContractMethod<
    [
      initialOwner: AddressLike,
      tokenName: string,
      tokenSymbol: string,
      iAsset: AddressLike,
      istrategies: AddressLike[],
      iweights: BigNumberish[],
      weth: AddressLike,
    ],
    [void],
    'nonpayable'
  >;

  isAccountEnabled: TypedContractMethod<[account: AddressLike], [boolean], 'view'>;

  maxDeposit: TypedContractMethod<[receiver: AddressLike], [bigint], 'view'>;

  maxMint: TypedContractMethod<[receiver: AddressLike], [bigint], 'view'>;

  maxRedeem: TypedContractMethod<[shareHolder: AddressLike], [bigint], 'view'>;

  maxWithdraw: TypedContractMethod<[shareHolder: AddressLike], [bigint], 'view'>;

  mint: TypedContractMethod<[shares: BigNumberish, receiver: AddressLike], [bigint], 'nonpayable'>;

  name: TypedContractMethod<[], [string], 'view'>;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewWithdraw: TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;

  rebalance: TypedContractMethod<
    [commands: IVault.RebalanceCommandStruct[]],
    [boolean],
    'nonpayable'
  >;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, holder: AddressLike],
    [bigint],
    'nonpayable'
  >;

  redeemNative: TypedContractMethod<[shares: BigNumberish], [bigint], 'nonpayable'>;

  removeStrategy: TypedContractMethod<[index: BigNumberish], [void], 'nonpayable'>;

  renounceRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;

  revokeRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;

  setFeeReceiver: TypedContractMethod<[receiver: AddressLike], [void], 'nonpayable'>;

  setMaxDeposit: TypedContractMethod<[value: BigNumberish], [void], 'nonpayable'>;

  setPerformanceFee: TypedContractMethod<[fee: BigNumberish], [void], 'nonpayable'>;

  setWeights: TypedContractMethod<[iweights: BigNumberish[]], [void], 'nonpayable'>;

  setWithdrawalFee: TypedContractMethod<[fee: BigNumberish], [void], 'nonpayable'>;

  strategies: TypedContractMethod<[], [string[]], 'view'>;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;

  symbol: TypedContractMethod<[], [string], 'view'>;

  tokenPerAsset: TypedContractMethod<[], [bigint], 'view'>;

  totalAssets: TypedContractMethod<[], [bigint], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  totalWeight: TypedContractMethod<[], [bigint], 'view'>;

  transfer: TypedContractMethod<[to: AddressLike, amount: BigNumberish], [boolean], 'nonpayable'>;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  weights: TypedContractMethod<[], [bigint[]], 'view'>;

  withdraw: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, holder: AddressLike],
    [bigint],
    'nonpayable'
  >;

  withdrawNative: TypedContractMethod<[assets: BigNumberish], [bigint], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'CHANGE_WEIGHTS'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'HARVEST_VAULT'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'MAX_TOTAL_WEIGHT'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'REBALANCE_STRATEGIES'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: '_initializeVaultSettings',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'addStrategy',
  ): TypedContractMethod<[strategy: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'allowance',
  ): TypedContractMethod<[owner: AddressLike, spender: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'approve',
  ): TypedContractMethod<[spender: AddressLike, amount: BigNumberish], [boolean], 'nonpayable'>;
  getFunction(nameOrSignature: 'asset'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'balanceOf',
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'convertToAssets',
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'convertToShares',
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(nameOrSignature: 'decimals'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decreaseAllowance',
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deposit',
  ): TypedContractMethod<[assets: BigNumberish, receiver: AddressLike], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'depositNative',
  ): TypedContractMethod<[receiver: AddressLike], [bigint], 'payable'>;
  getFunction(
    nameOrSignature: 'enableAccount',
  ): TypedContractMethod<[account: AddressLike, enabled: boolean], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'getFeeReceiver'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'getMaxDeposit'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getPerformanceFee'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getRoleAdmin',
  ): TypedContractMethod<[role: BytesLike], [string], 'view'>;
  getFunction(nameOrSignature: 'getWithdrawalFee'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'grantRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'hasRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'increaseAllowance',
  ): TypedContractMethod<[spender: AddressLike, addedValue: BigNumberish], [boolean], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'initialize',
  ): TypedContractMethod<
    [
      initialOwner: AddressLike,
      tokenName: string,
      tokenSymbol: string,
      iAsset: AddressLike,
      istrategies: AddressLike[],
      iweights: BigNumberish[],
      weth: AddressLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'isAccountEnabled',
  ): TypedContractMethod<[account: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'maxDeposit',
  ): TypedContractMethod<[receiver: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxMint',
  ): TypedContractMethod<[receiver: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxRedeem',
  ): TypedContractMethod<[shareHolder: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxWithdraw',
  ): TypedContractMethod<[shareHolder: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'mint',
  ): TypedContractMethod<[shares: BigNumberish, receiver: AddressLike], [bigint], 'nonpayable'>;
  getFunction(nameOrSignature: 'name'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'pause'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'paused'): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'previewDeposit',
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewMint',
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewRedeem',
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewWithdraw',
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'rebalance',
  ): TypedContractMethod<[commands: IVault.RebalanceCommandStruct[]], [boolean], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'redeem',
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, holder: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'redeemNative',
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeStrategy',
  ): TypedContractMethod<[index: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'renounceRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'revokeRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setFeeReceiver',
  ): TypedContractMethod<[receiver: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setMaxDeposit',
  ): TypedContractMethod<[value: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setPerformanceFee',
  ): TypedContractMethod<[fee: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setWeights',
  ): TypedContractMethod<[iweights: BigNumberish[]], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setWithdrawalFee',
  ): TypedContractMethod<[fee: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'strategies'): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'supportsInterface',
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'symbol'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'tokenPerAsset'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'totalAssets'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'totalWeight'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transfer',
  ): TypedContractMethod<[to: AddressLike, amount: BigNumberish], [boolean], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transferFrom',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'unpause'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'weights'): TypedContractMethod<[], [bigint[]], 'view'>;
  getFunction(
    nameOrSignature: 'withdraw',
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, holder: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'withdrawNative',
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'nonpayable'>;

  getEvent(
    key: 'AccountWhiteList',
  ): TypedContractEvent<
    AccountWhiteListEvent.InputTuple,
    AccountWhiteListEvent.OutputTuple,
    AccountWhiteListEvent.OutputObject
  >;
  getEvent(
    key: 'AddStrategy',
  ): TypedContractEvent<
    AddStrategyEvent.InputTuple,
    AddStrategyEvent.OutputTuple,
    AddStrategyEvent.OutputObject
  >;
  getEvent(
    key: 'Approval',
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: 'Deposit',
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: 'FeeReceiverChanged',
  ): TypedContractEvent<
    FeeReceiverChangedEvent.InputTuple,
    FeeReceiverChangedEvent.OutputTuple,
    FeeReceiverChangedEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'MaxDepositChanged',
  ): TypedContractEvent<
    MaxDepositChangedEvent.InputTuple,
    MaxDepositChangedEvent.OutputTuple,
    MaxDepositChangedEvent.OutputObject
  >;
  getEvent(
    key: 'MaxDifferenceUpdated',
  ): TypedContractEvent<
    MaxDifferenceUpdatedEvent.InputTuple,
    MaxDifferenceUpdatedEvent.OutputTuple,
    MaxDifferenceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
  getEvent(
    key: 'PerformanceFeeChanged',
  ): TypedContractEvent<
    PerformanceFeeChangedEvent.InputTuple,
    PerformanceFeeChangedEvent.OutputTuple,
    PerformanceFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: 'RemoveStrategy',
  ): TypedContractEvent<
    RemoveStrategyEvent.InputTuple,
    RemoveStrategyEvent.OutputTuple,
    RemoveStrategyEvent.OutputObject
  >;
  getEvent(
    key: 'RoleAdminChanged',
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleGranted',
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleRevoked',
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer',
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused',
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: 'WeightsUpdated',
  ): TypedContractEvent<
    WeightsUpdatedEvent.InputTuple,
    WeightsUpdatedEvent.OutputTuple,
    WeightsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Withdraw',
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: 'WithdrawalFeeChanged',
  ): TypedContractEvent<
    WithdrawalFeeChangedEvent.InputTuple,
    WithdrawalFeeChangedEvent.OutputTuple,
    WithdrawalFeeChangedEvent.OutputObject
  >;

  filters: {
    'AccountWhiteList(address,bool)': TypedContractEvent<
      AccountWhiteListEvent.InputTuple,
      AccountWhiteListEvent.OutputTuple,
      AccountWhiteListEvent.OutputObject
    >;
    AccountWhiteList: TypedContractEvent<
      AccountWhiteListEvent.InputTuple,
      AccountWhiteListEvent.OutputTuple,
      AccountWhiteListEvent.OutputObject
    >;

    'AddStrategy(address)': TypedContractEvent<
      AddStrategyEvent.InputTuple,
      AddStrategyEvent.OutputTuple,
      AddStrategyEvent.OutputObject
    >;
    AddStrategy: TypedContractEvent<
      AddStrategyEvent.InputTuple,
      AddStrategyEvent.OutputTuple,
      AddStrategyEvent.OutputObject
    >;

    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    'Deposit(address,address,uint256,uint256)': TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    'FeeReceiverChanged(address)': TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;
    FeeReceiverChanged: TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'MaxDepositChanged(uint256)': TypedContractEvent<
      MaxDepositChangedEvent.InputTuple,
      MaxDepositChangedEvent.OutputTuple,
      MaxDepositChangedEvent.OutputObject
    >;
    MaxDepositChanged: TypedContractEvent<
      MaxDepositChangedEvent.InputTuple,
      MaxDepositChangedEvent.OutputTuple,
      MaxDepositChangedEvent.OutputObject
    >;

    'MaxDifferenceUpdated(uint256)': TypedContractEvent<
      MaxDifferenceUpdatedEvent.InputTuple,
      MaxDifferenceUpdatedEvent.OutputTuple,
      MaxDifferenceUpdatedEvent.OutputObject
    >;
    MaxDifferenceUpdated: TypedContractEvent<
      MaxDifferenceUpdatedEvent.InputTuple,
      MaxDifferenceUpdatedEvent.OutputTuple,
      MaxDifferenceUpdatedEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'PerformanceFeeChanged(uint256)': TypedContractEvent<
      PerformanceFeeChangedEvent.InputTuple,
      PerformanceFeeChangedEvent.OutputTuple,
      PerformanceFeeChangedEvent.OutputObject
    >;
    PerformanceFeeChanged: TypedContractEvent<
      PerformanceFeeChangedEvent.InputTuple,
      PerformanceFeeChangedEvent.OutputTuple,
      PerformanceFeeChangedEvent.OutputObject
    >;

    'RemoveStrategy(address)': TypedContractEvent<
      RemoveStrategyEvent.InputTuple,
      RemoveStrategyEvent.OutputTuple,
      RemoveStrategyEvent.OutputObject
    >;
    RemoveStrategy: TypedContractEvent<
      RemoveStrategyEvent.InputTuple,
      RemoveStrategyEvent.OutputTuple,
      RemoveStrategyEvent.OutputObject
    >;

    'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    'RoleGranted(bytes32,address,address)': TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    'RoleRevoked(bytes32,address,address)': TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    'WeightsUpdated(uint16[])': TypedContractEvent<
      WeightsUpdatedEvent.InputTuple,
      WeightsUpdatedEvent.OutputTuple,
      WeightsUpdatedEvent.OutputObject
    >;
    WeightsUpdated: TypedContractEvent<
      WeightsUpdatedEvent.InputTuple,
      WeightsUpdatedEvent.OutputTuple,
      WeightsUpdatedEvent.OutputObject
    >;

    'Withdraw(address,address,address,uint256,uint256)': TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    'WithdrawalFeeChanged(uint256)': TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;
    WithdrawalFeeChanged: TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;
  };
}
