/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export type CommandStruct = { action: BigNumberish; data: BytesLike };

export type CommandStructOutput = [action: bigint, data: string] & {
  action: bigint;
  data: string;
};

export declare namespace UseUnifiedSwapper {
  export type RouteInfoStruct = {
    provider: BigNumberish;
    router: AddressLike;
    uniV3Tier: BigNumberish;
    tickSpacing: BigNumberish;
  };

  export type RouteInfoStructOutput = [
    provider: bigint,
    router: string,
    uniV3Tier: bigint,
    tickSpacing: bigint,
  ] & {
    provider: bigint;
    router: string;
    uniV3Tier: bigint;
    tickSpacing: bigint;
  };
}

export interface VaultRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'approveTokenForVault'
      | 'disableRoute'
      | 'enableRoute'
      | 'execute'
      | 'governor'
      | 'initialize'
      | 'isRouteEnabled'
      | 'isTokenApprovedForVault'
      | 'owner'
      | 'renounceOwnership'
      | 'transferGovernorship'
      | 'transferOwnership'
      | 'unapproveTokenForVault',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: 'GovernshipTransferred' | 'Initialized' | 'OwnershipTransferred',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'approveTokenForVault',
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'disableRoute', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'enableRoute',
    values: [AddressLike, AddressLike, UseUnifiedSwapper.RouteInfoStruct],
  ): string;
  encodeFunctionData(functionFragment: 'execute', values: [CommandStruct[]]): string;
  encodeFunctionData(functionFragment: 'governor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'isRouteEnabled',
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isTokenApprovedForVault',
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferGovernorship', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'unapproveTokenForVault',
    values: [AddressLike, AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: 'approveTokenForVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableRoute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableRoute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isRouteEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTokenApprovedForVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferGovernorship', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unapproveTokenForVault', data: BytesLike): Result;
}

export namespace GovernshipTransferredEvent {
  export type InputTuple = [previousGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [previousGovernor: string, newGovernor: string];
  export interface OutputObject {
    previousGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultRouter extends BaseContract {
  connect(runner?: ContractRunner | null): VaultRouter;
  waitForDeployment(): Promise<this>;

  interface: VaultRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  approveTokenForVault: TypedContractMethod<
    [vault: AddressLike, token: AddressLike],
    [void],
    'nonpayable'
  >;

  disableRoute: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike],
    [void],
    'nonpayable'
  >;

  enableRoute: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, routeInfo: UseUnifiedSwapper.RouteInfoStruct],
    [void],
    'nonpayable'
  >;

  execute: TypedContractMethod<[commands: CommandStruct[]], [void], 'payable'>;

  governor: TypedContractMethod<[], [string], 'view'>;

  initialize: TypedContractMethod<
    [initialOwner: AddressLike, weth: AddressLike],
    [void],
    'nonpayable'
  >;

  isRouteEnabled: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike],
    [boolean],
    'view'
  >;

  isTokenApprovedForVault: TypedContractMethod<
    [vault: AddressLike, token: AddressLike],
    [boolean],
    'view'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  transferGovernorship: TypedContractMethod<[_newGovernor: AddressLike], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  unapproveTokenForVault: TypedContractMethod<
    [vault: AddressLike, token: AddressLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'approveTokenForVault',
  ): TypedContractMethod<[vault: AddressLike, token: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'disableRoute',
  ): TypedContractMethod<[tokenIn: AddressLike, tokenOut: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'enableRoute',
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, routeInfo: UseUnifiedSwapper.RouteInfoStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'execute',
  ): TypedContractMethod<[commands: CommandStruct[]], [void], 'payable'>;
  getFunction(nameOrSignature: 'governor'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'initialize',
  ): TypedContractMethod<[initialOwner: AddressLike, weth: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'isRouteEnabled',
  ): TypedContractMethod<[tokenIn: AddressLike, tokenOut: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isTokenApprovedForVault',
  ): TypedContractMethod<[vault: AddressLike, token: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transferGovernorship',
  ): TypedContractMethod<[_newGovernor: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unapproveTokenForVault',
  ): TypedContractMethod<[vault: AddressLike, token: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'GovernshipTransferred',
  ): TypedContractEvent<
    GovernshipTransferredEvent.InputTuple,
    GovernshipTransferredEvent.OutputTuple,
    GovernshipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    'GovernshipTransferred(address,address)': TypedContractEvent<
      GovernshipTransferredEvent.InputTuple,
      GovernshipTransferredEvent.OutputTuple,
      GovernshipTransferredEvent.OutputObject
    >;
    GovernshipTransferred: TypedContractEvent<
      GovernshipTransferredEvent.InputTuple,
      GovernshipTransferredEvent.OutputTuple,
      GovernshipTransferredEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
