/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../../../common';

export declare namespace ISwapHandler {
  export type SwapParamsStruct = {
    underlyingIn: AddressLike;
    underlyingOut: AddressLike;
    mode: BigNumberish;
    amountIn: BigNumberish;
    amountOut: BigNumberish;
    payload: BytesLike;
  };

  export type SwapParamsStructOutput = [
    underlyingIn: string,
    underlyingOut: string,
    mode: bigint,
    amountIn: bigint,
    amountOut: bigint,
    payload: string,
  ] & {
    underlyingIn: string;
    underlyingOut: string;
    mode: bigint;
    amountIn: bigint;
    amountOut: bigint;
    payload: string;
  };
}

export interface UseUniV2SwapperMockInterface extends Interface {
  getFunction(nameOrSignature: 'test__swap'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'test__swap',
    values: [ISwapHandler.SwapParamsStruct],
  ): string;

  decodeFunctionResult(functionFragment: 'test__swap', data: BytesLike): Result;
}

export interface UseUniV2SwapperMock extends BaseContract {
  connect(runner?: ContractRunner | null): UseUniV2SwapperMock;
  waitForDeployment(): Promise<this>;

  interface: UseUniV2SwapperMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  test__swap: TypedContractMethod<
    [params: ISwapHandler.SwapParamsStruct],
    [[bigint, bigint] & { amountIn: bigint; amountOut: bigint }],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'test__swap',
  ): TypedContractMethod<
    [params: ISwapHandler.SwapParamsStruct],
    [[bigint, bigint] & { amountIn: bigint; amountOut: bigint }],
    'nonpayable'
  >;

  filters: {};
}
