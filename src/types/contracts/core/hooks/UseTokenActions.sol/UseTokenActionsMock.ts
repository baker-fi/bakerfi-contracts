/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../common';

export interface UseTokenActionsMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'test__pullToken'
      | 'test__pullTokenFrom'
      | 'test__pushToken'
      | 'test__pushTokenFrom'
      | 'test__sweepNative'
      | 'test__sweepTokens',
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;

  encodeFunctionData(
    functionFragment: 'test__pullToken',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'test__pullTokenFrom',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'test__pushToken',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'test__pushTokenFrom',
    values: [AddressLike, AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'test__sweepNative', values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'test__sweepTokens',
    values: [AddressLike, AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: 'test__pullToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'test__pullTokenFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'test__pushToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'test__pushTokenFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'test__sweepNative', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'test__sweepTokens', data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UseTokenActionsMock extends BaseContract {
  connect(runner?: ContractRunner | null): UseTokenActionsMock;
  waitForDeployment(): Promise<this>;

  interface: UseTokenActionsMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  test__pullToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  test__pullTokenFrom: TypedContractMethod<
    [token: AddressLike, from: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  test__pushToken: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  test__pushTokenFrom: TypedContractMethod<
    [token: AddressLike, from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  test__sweepNative: TypedContractMethod<[to: AddressLike], [bigint], 'nonpayable'>;

  test__sweepTokens: TypedContractMethod<
    [token: AddressLike, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'test__pullToken',
  ): TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'test__pullTokenFrom',
  ): TypedContractMethod<
    [token: AddressLike, from: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'test__pushToken',
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'test__pushTokenFrom',
  ): TypedContractMethod<
    [token: AddressLike, from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'test__sweepNative',
  ): TypedContractMethod<[to: AddressLike], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'test__sweepTokens',
  ): TypedContractMethod<[token: AddressLike, to: AddressLike], [bigint], 'nonpayable'>;

  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
