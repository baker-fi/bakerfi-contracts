/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MultiStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TOTAL_WEIGHT"
      | "strategies"
      | "totalWeight"
      | "weights"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddStrategy"
      | "Initialized"
      | "MaxDifferenceUpdated"
      | "RemoveStrategy"
      | "WeightsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_TOTAL_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weights", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weights", data: BytesLike): Result;
}

export namespace AddStrategyEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxDifferenceUpdatedEvent {
  export type InputTuple = [maxDifference: BigNumberish];
  export type OutputTuple = [maxDifference: bigint];
  export interface OutputObject {
    maxDifference: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveStrategyEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeightsUpdatedEvent {
  export type InputTuple = [weights: BigNumberish[]];
  export type OutputTuple = [weights: bigint[]];
  export interface OutputObject {
    weights: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): MultiStrategy;
  waitForDeployment(): Promise<this>;

  interface: MultiStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TOTAL_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  strategies: TypedContractMethod<[], [string[]], "view">;

  totalWeight: TypedContractMethod<[], [bigint], "view">;

  weights: TypedContractMethod<[], [bigint[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TOTAL_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "totalWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "weights"
  ): TypedContractMethod<[], [bigint[]], "view">;

  getEvent(
    key: "AddStrategy"
  ): TypedContractEvent<
    AddStrategyEvent.InputTuple,
    AddStrategyEvent.OutputTuple,
    AddStrategyEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxDifferenceUpdated"
  ): TypedContractEvent<
    MaxDifferenceUpdatedEvent.InputTuple,
    MaxDifferenceUpdatedEvent.OutputTuple,
    MaxDifferenceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RemoveStrategy"
  ): TypedContractEvent<
    RemoveStrategyEvent.InputTuple,
    RemoveStrategyEvent.OutputTuple,
    RemoveStrategyEvent.OutputObject
  >;
  getEvent(
    key: "WeightsUpdated"
  ): TypedContractEvent<
    WeightsUpdatedEvent.InputTuple,
    WeightsUpdatedEvent.OutputTuple,
    WeightsUpdatedEvent.OutputObject
  >;

  filters: {
    "AddStrategy(address)": TypedContractEvent<
      AddStrategyEvent.InputTuple,
      AddStrategyEvent.OutputTuple,
      AddStrategyEvent.OutputObject
    >;
    AddStrategy: TypedContractEvent<
      AddStrategyEvent.InputTuple,
      AddStrategyEvent.OutputTuple,
      AddStrategyEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxDifferenceUpdated(uint256)": TypedContractEvent<
      MaxDifferenceUpdatedEvent.InputTuple,
      MaxDifferenceUpdatedEvent.OutputTuple,
      MaxDifferenceUpdatedEvent.OutputObject
    >;
    MaxDifferenceUpdated: TypedContractEvent<
      MaxDifferenceUpdatedEvent.InputTuple,
      MaxDifferenceUpdatedEvent.OutputTuple,
      MaxDifferenceUpdatedEvent.OutputObject
    >;

    "RemoveStrategy(address)": TypedContractEvent<
      RemoveStrategyEvent.InputTuple,
      RemoveStrategyEvent.OutputTuple,
      RemoveStrategyEvent.OutputObject
    >;
    RemoveStrategy: TypedContractEvent<
      RemoveStrategyEvent.InputTuple,
      RemoveStrategyEvent.OutputTuple,
      RemoveStrategyEvent.OutputObject
    >;

    "WeightsUpdated(uint16[])": TypedContractEvent<
      WeightsUpdatedEvent.InputTuple,
      WeightsUpdatedEvent.OutputTuple,
      WeightsUpdatedEvent.OutputObject
    >;
    WeightsUpdated: TypedContractEvent<
      WeightsUpdatedEvent.InputTuple,
      WeightsUpdatedEvent.OutputTuple,
      WeightsUpdatedEvent.OutputObject
    >;
  };
}
