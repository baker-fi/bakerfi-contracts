/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export declare namespace IOracle {
  export type PriceStruct = { price: BigNumberish; lastUpdate: BigNumberish };

  export type PriceStructOutput = [price: bigint, lastUpdate: bigint] & {
    price: bigint;
    lastUpdate: bigint;
  };

  export type PriceOptionsStruct = {
    maxAge: BigNumberish;
    maxConf: BigNumberish;
  };

  export type PriceOptionsStructOutput = [maxAge: bigint, maxConf: bigint] & {
    maxAge: bigint;
    maxConf: bigint;
  };
}

export interface PythOracleInterface extends Interface {
  getFunction(
    nameOrSignature: 'getAndUpdatePrice' | 'getLatestPrice' | 'getPrecision' | 'getSafeLatestPrice',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getAndUpdatePrice', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getLatestPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPrecision', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getSafeLatestPrice',
    values: [IOracle.PriceOptionsStruct],
  ): string;

  decodeFunctionResult(functionFragment: 'getAndUpdatePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLatestPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPrecision', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSafeLatestPrice', data: BytesLike): Result;
}

export interface PythOracle extends BaseContract {
  connect(runner?: ContractRunner | null): PythOracle;
  waitForDeployment(): Promise<this>;

  interface: PythOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  getAndUpdatePrice: TypedContractMethod<
    [priceUpdateData: BytesLike],
    [IOracle.PriceStructOutput],
    'payable'
  >;

  getLatestPrice: TypedContractMethod<[], [IOracle.PriceStructOutput], 'view'>;

  getPrecision: TypedContractMethod<[], [bigint], 'view'>;

  getSafeLatestPrice: TypedContractMethod<
    [priceOptions: IOracle.PriceOptionsStruct],
    [IOracle.PriceStructOutput],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'getAndUpdatePrice',
  ): TypedContractMethod<[priceUpdateData: BytesLike], [IOracle.PriceStructOutput], 'payable'>;
  getFunction(
    nameOrSignature: 'getLatestPrice',
  ): TypedContractMethod<[], [IOracle.PriceStructOutput], 'view'>;
  getFunction(nameOrSignature: 'getPrecision'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getSafeLatestPrice',
  ): TypedContractMethod<
    [priceOptions: IOracle.PriceOptionsStruct],
    [IOracle.PriceStructOutput],
    'view'
  >;

  filters: {};
}
