/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IVaultRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getService"
      | "getServiceFromHash"
      | "registerService"
      | "unregisterService"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ServiceRegistered" | "ServiceUnregistered"
  ): EventFragment;

  encodeFunctionData(functionFragment: "getService", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getServiceFromHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerService",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterService",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getServiceFromHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterService",
    data: BytesLike
  ): Result;
}

export namespace ServiceRegisteredEvent {
  export type InputTuple = [nameHash: BytesLike, service: AddressLike];
  export type OutputTuple = [nameHash: string, service: string];
  export interface OutputObject {
    nameHash: string;
    service: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceUnregisteredEvent {
  export type InputTuple = [nameHash: BytesLike];
  export type OutputTuple = [nameHash: string];
  export interface OutputObject {
    nameHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVaultRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IVaultRegistry;
  waitForDeployment(): Promise<this>;

  interface: IVaultRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getService: TypedContractMethod<[serviceName: string], [string], "view">;

  getServiceFromHash: TypedContractMethod<
    [serviceHash: BytesLike],
    [string],
    "view"
  >;

  registerService: TypedContractMethod<
    [serviceNameHash: BytesLike, serviceAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterService: TypedContractMethod<
    [serviceNameHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getService"
  ): TypedContractMethod<[serviceName: string], [string], "view">;
  getFunction(
    nameOrSignature: "getServiceFromHash"
  ): TypedContractMethod<[serviceHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "registerService"
  ): TypedContractMethod<
    [serviceNameHash: BytesLike, serviceAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unregisterService"
  ): TypedContractMethod<[serviceNameHash: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "ServiceRegistered"
  ): TypedContractEvent<
    ServiceRegisteredEvent.InputTuple,
    ServiceRegisteredEvent.OutputTuple,
    ServiceRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ServiceUnregistered"
  ): TypedContractEvent<
    ServiceUnregisteredEvent.InputTuple,
    ServiceUnregisteredEvent.OutputTuple,
    ServiceUnregisteredEvent.OutputObject
  >;

  filters: {
    "ServiceRegistered(bytes32,address)": TypedContractEvent<
      ServiceRegisteredEvent.InputTuple,
      ServiceRegisteredEvent.OutputTuple,
      ServiceRegisteredEvent.OutputObject
    >;
    ServiceRegistered: TypedContractEvent<
      ServiceRegisteredEvent.InputTuple,
      ServiceRegisteredEvent.OutputTuple,
      ServiceRegisteredEvent.OutputObject
    >;

    "ServiceUnregistered(bytes32)": TypedContractEvent<
      ServiceUnregisteredEvent.InputTuple,
      ServiceUnregisteredEvent.OutputTuple,
      ServiceUnregisteredEvent.OutputObject
    >;
    ServiceUnregistered: TypedContractEvent<
      ServiceUnregisteredEvent.InputTuple,
      ServiceUnregisteredEvent.OutputTuple,
      ServiceUnregisteredEvent.OutputObject
    >;
  };
}
