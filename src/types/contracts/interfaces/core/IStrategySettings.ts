/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IStrategySettingsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPriceMaxAge"
      | "getPriceMaxConf"
      | "setPriceMaxAge"
      | "setPriceMaxConf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PriceMaxAgeChanged" | "PriceMaxConfChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPriceMaxAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceMaxConf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceMaxAge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceMaxConf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPriceMaxAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceMaxConf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceMaxAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceMaxConf",
    data: BytesLike
  ): Result;
}

export namespace PriceMaxAgeChangedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceMaxConfChangedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStrategySettings extends BaseContract {
  connect(runner?: ContractRunner | null): IStrategySettings;
  waitForDeployment(): Promise<this>;

  interface: IStrategySettingsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPriceMaxAge: TypedContractMethod<[], [bigint], "view">;

  getPriceMaxConf: TypedContractMethod<[], [bigint], "view">;

  setPriceMaxAge: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceMaxConf: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPriceMaxAge"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceMaxConf"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setPriceMaxAge"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceMaxConf"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "PriceMaxAgeChanged"
  ): TypedContractEvent<
    PriceMaxAgeChangedEvent.InputTuple,
    PriceMaxAgeChangedEvent.OutputTuple,
    PriceMaxAgeChangedEvent.OutputObject
  >;
  getEvent(
    key: "PriceMaxConfChanged"
  ): TypedContractEvent<
    PriceMaxConfChangedEvent.InputTuple,
    PriceMaxConfChangedEvent.OutputTuple,
    PriceMaxConfChangedEvent.OutputObject
  >;

  filters: {
    "PriceMaxAgeChanged(uint256)": TypedContractEvent<
      PriceMaxAgeChangedEvent.InputTuple,
      PriceMaxAgeChangedEvent.OutputTuple,
      PriceMaxAgeChangedEvent.OutputObject
    >;
    PriceMaxAgeChanged: TypedContractEvent<
      PriceMaxAgeChangedEvent.InputTuple,
      PriceMaxAgeChangedEvent.OutputTuple,
      PriceMaxAgeChangedEvent.OutputObject
    >;

    "PriceMaxConfChanged(uint256)": TypedContractEvent<
      PriceMaxConfChangedEvent.InputTuple,
      PriceMaxConfChangedEvent.OutputTuple,
      PriceMaxConfChangedEvent.OutputObject
    >;
    PriceMaxConfChanged: TypedContractEvent<
      PriceMaxConfChangedEvent.InputTuple,
      PriceMaxConfChangedEvent.OutputTuple,
      PriceMaxConfChangedEvent.OutputObject
    >;
  };
}
