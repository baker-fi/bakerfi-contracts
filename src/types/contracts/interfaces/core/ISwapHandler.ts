/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISwapHandler {
  export type SwapParamsStruct = {
    underlyingIn: AddressLike;
    underlyingOut: AddressLike;
    mode: BigNumberish;
    amountIn: BigNumberish;
    amountOut: BigNumberish;
    payload: BytesLike;
  };

  export type SwapParamsStructOutput = [
    underlyingIn: string,
    underlyingOut: string,
    mode: bigint,
    amountIn: bigint,
    amountOut: bigint,
    payload: string
  ] & {
    underlyingIn: string;
    underlyingOut: string;
    mode: bigint;
    amountIn: bigint;
    amountOut: bigint;
    payload: string;
  };
}

export interface ISwapHandlerInterface extends Interface {
  getFunction(nameOrSignature: "executeSwap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [ISwapHandler.SwapParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
}

export interface ISwapHandler extends BaseContract {
  connect(runner?: ContractRunner | null): ISwapHandler;
  waitForDeployment(): Promise<this>;

  interface: ISwapHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeSwap: TypedContractMethod<
    [params: ISwapHandler.SwapParamsStruct],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeSwap"
  ): TypedContractMethod<
    [params: ISwapHandler.SwapParamsStruct],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
