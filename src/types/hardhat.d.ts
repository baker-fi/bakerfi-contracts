/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers';
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomicfoundation/hardhat-ethers/types';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'IIrm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IIrm__factory>;
    getContractFactory(
      name: 'IMorpho',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMorpho__factory>;
    getContractFactory(
      name: 'IMorphoBase',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMorphoBase__factory>;
    getContractFactory(
      name: 'IMorphoStaticTyping',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMorphoStaticTyping__factory>;
    getContractFactory(
      name: 'AccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: 'IAccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: 'OwnableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: 'IERC3156FlashBorrowerUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC3156FlashBorrowerUpgradeable__factory>;
    getContractFactory(
      name: 'IERC3156FlashLenderUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC3156FlashLenderUpgradeable__factory>;
    getContractFactory(
      name: 'IERC4626Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC4626Upgradeable__factory>;
    getContractFactory(
      name: 'IERC5267Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC5267Upgradeable__factory>;
    getContractFactory(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: 'PausableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: 'ReentrancyGuardUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: 'ERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: 'ERC20PermitUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: 'IERC20MetadataUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: 'IERC20PermitUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: 'IERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: 'ContextUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: 'EIP712Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: 'ERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: 'IERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: 'AccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: 'IAccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: 'GovernorCompatibilityBravo',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.GovernorCompatibilityBravo__factory>;
    getContractFactory(
      name: 'IGovernorCompatibilityBravo',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IGovernorCompatibilityBravo__factory>;
    getContractFactory(
      name: 'GovernorTimelockControl',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.GovernorTimelockControl__factory>;
    getContractFactory(
      name: 'GovernorVotes',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.GovernorVotes__factory>;
    getContractFactory(
      name: 'GovernorVotesQuorumFraction',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.GovernorVotesQuorumFraction__factory>;
    getContractFactory(
      name: 'IGovernorTimelock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IGovernorTimelock__factory>;
    getContractFactory(
      name: 'Governor',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: 'IGovernor',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IGovernor__factory>;
    getContractFactory(
      name: 'TimelockController',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: 'IVotes',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: 'IERC1822Proxiable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: 'IERC1967',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: 'IERC3156FlashBorrower',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: 'IERC3156FlashLender',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: 'IERC4626',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: 'IERC5267',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: 'IERC5805',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC5805__factory>;
    getContractFactory(
      name: 'IERC6372',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC6372__factory>;
    getContractFactory(
      name: 'IBeacon',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: 'ERC1967Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: 'ERC1967Upgrade',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: 'Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: 'ProxyAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: 'ITransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: 'TransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: 'IERC1155Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'ERC20Burnable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: 'ERC20Permit',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: 'ERC20Votes',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Votes__factory>;
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: 'IERC20Permit',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'IERC721Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: 'EIP712',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'ShortStrings',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: 'DoubleEndedQueue',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DoubleEndedQueue__factory>;
    getContractFactory(
      name: 'BalancerFlashLender',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BalancerFlashLender__factory>;
    getContractFactory(
      name: 'GovernableOwnable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.GovernableOwnable__factory>;
    getContractFactory(
      name: 'BakerFiGovernor',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BakerFiGovernor__factory>;
    getContractFactory(
      name: 'BKR',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BKR__factory>;
    getContractFactory(
      name: 'Timelock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: 'UseAeroSwapper',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseAeroSwapper__factory>;
    getContractFactory(
      name: 'UseAeroSwapperMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseAeroSwapperMock__factory>;
    getContractFactory(
      name: 'UseCurveSwapper',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseCurveSwapper__factory>;
    getContractFactory(
      name: 'UseCurveSwapperMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseCurveSwapperMock__factory>;
    getContractFactory(
      name: 'UseUnifiedSwapper',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseUnifiedSwapper__factory>;
    getContractFactory(
      name: 'UseUnifiedSwapperMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseUnifiedSwapperMock__factory>;
    getContractFactory(
      name: 'UseUniV2Swapper',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseUniV2Swapper__factory>;
    getContractFactory(
      name: 'UseUniV2SwapperMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseUniV2SwapperMock__factory>;
    getContractFactory(
      name: 'UseUniV3Swapper',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseUniV3Swapper__factory>;
    getContractFactory(
      name: 'UseAAVEv3',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseAAVEv3__factory>;
    getContractFactory(
      name: 'UseFlashLender',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseFlashLender__factory>;
    getContractFactory(
      name: 'UseIERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseIERC20__factory>;
    getContractFactory(
      name: 'UseIERC4626',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseIERC4626__factory>;
    getContractFactory(
      name: 'UseIERC4626Mock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseIERC4626Mock__factory>;
    getContractFactory(
      name: 'UseLeverage',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseLeverage__factory>;
    getContractFactory(
      name: 'UseOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseOracle__factory>;
    getContractFactory(
      name: 'UsePermitTransfersMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UsePermitTransfersMock__factory>;
    getContractFactory(
      name: 'UseStETH',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseStETH__factory>;
    getContractFactory(
      name: 'UseStrategy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseStrategy__factory>;
    getContractFactory(
      name: 'UseTokenActions',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseTokenActions__factory>;
    getContractFactory(
      name: 'UseTokenActionsMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseTokenActionsMock__factory>;
    getContractFactory(
      name: 'UseUniQuoter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseUniQuoter__factory>;
    getContractFactory(
      name: 'UseWETH',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseWETH__factory>;
    getContractFactory(
      name: 'UseWETHMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseWETHMock__factory>;
    getContractFactory(
      name: 'UseWstETH',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UseWstETH__factory>;
    getContractFactory(
      name: 'MultiCommand',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MultiCommand__factory>;
    getContractFactory(
      name: 'MultiStrategy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MultiStrategy__factory>;
    getContractFactory(
      name: 'MultiStrategyVault',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MultiStrategyVault__factory>;
    getContractFactory(
      name: 'Commands',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Commands__factory>;
    getContractFactory(
      name: 'StrategyAeroSwapAnd',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyAeroSwapAnd__factory>;
    getContractFactory(
      name: 'StrategyCurveSwapAnd',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyCurveSwapAnd__factory>;
    getContractFactory(
      name: 'StrategyLeverage',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyLeverage__factory>;
    getContractFactory(
      name: 'StrategyLeverageAAVEv3',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyLeverageAAVEv3__factory>;
    getContractFactory(
      name: 'StrategyLeverageMorphoBlue',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyLeverageMorphoBlue__factory>;
    getContractFactory(
      name: 'StrategyLeverageSettings',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyLeverageSettings__factory>;
    getContractFactory(
      name: 'StrategyPark',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyPark__factory>;
    getContractFactory(
      name: 'StrategySettings',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategySettings__factory>;
    getContractFactory(
      name: 'StrategySupplyAAVEv3',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategySupplyAAVEv3__factory>;
    getContractFactory(
      name: 'StrategySupplyBase',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategySupplyBase__factory>;
    getContractFactory(
      name: 'StrategySupplyERC4626',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategySupplyERC4626__factory>;
    getContractFactory(
      name: 'StrategySupplyMorpho',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategySupplyMorpho__factory>;
    getContractFactory(
      name: 'StrategySwapAnd',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategySwapAnd__factory>;
    getContractFactory(
      name: 'StrategyUniV2SwapAnd',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyUniV2SwapAnd__factory>;
    getContractFactory(
      name: 'StrategyUniV3SwapAnd',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyUniV3SwapAnd__factory>;
    getContractFactory(
      name: 'Vault',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: 'VaultBase',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.VaultBase__factory>;
    getContractFactory(
      name: 'VaultRegistry',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.VaultRegistry__factory>;
    getContractFactory(
      name: 'VaultRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.VaultRouter__factory>;
    getContractFactory(
      name: 'VaultSettings',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.VaultSettings__factory>;
    getContractFactory(
      name: 'IPoolAddressesProvider',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: 'IPoolV3',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPoolV3__factory>;
    getContractFactory(
      name: 'ICLSwapCallback',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICLSwapCallback__factory>;
    getContractFactory(
      name: 'ISwapRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: 'IFlashLoanRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IFlashLoanRecipient__factory>;
    getContractFactory(
      name: 'IFlashLoans',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IFlashLoans__factory>;
    getContractFactory(
      name: 'IProtocolFeesCollector',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IProtocolFeesCollector__factory>;
    getContractFactory(
      name: 'IVault',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: 'IChainlinkAggregator',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IChainlinkAggregator__factory>;
    getContractFactory(
      name: 'IOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: 'IStrategy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: 'IStrategyLeverage',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IStrategyLeverage__factory>;
    getContractFactory(
      name: 'IStrategySettings',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IStrategySettings__factory>;
    getContractFactory(
      name: 'ISwapHandler',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISwapHandler__factory>;
    getContractFactory(
      name: 'IVault',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: 'IVaultRegistry',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IVaultRegistry__factory>;
    getContractFactory(
      name: 'IVaultSettings',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IVaultSettings__factory>;
    getContractFactory(
      name: 'ICurvePool',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: 'ICurveRouterNG',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICurveRouterNG__factory>;
    getContractFactory(
      name: 'IStETH',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IStETH__factory>;
    getContractFactory(
      name: 'IWStETH',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IWStETH__factory>;
    getContractFactory(
      name: 'IPyth',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPyth__factory>;
    getContractFactory(
      name: 'IPythEvents',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPythEvents__factory>;
    getContractFactory(
      name: 'IWETH',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: 'IUniswapV2Router01',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: 'IUniswapV2Router02',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: 'IQuoterV2',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IQuoterV2__factory>;
    getContractFactory(
      name: 'IUniswapV3Pool',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: 'IUniswapV3SwapCallback',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: 'IV3SwapRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IV3SwapRouter__factory>;
    getContractFactory(
      name: 'AerodromeLibrary',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AerodromeLibrary__factory>;
    getContractFactory(
      name: 'CurveFiLibrary',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CurveFiLibrary__factory>;
    getContractFactory(
      name: 'MathLibrary',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MathLibrary__factory>;
    getContractFactory(
      name: 'UniV2Library',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniV2Library__factory>;
    getContractFactory(
      name: 'UniV3Library',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniV3Library__factory>;
    getContractFactory(
      name: 'AaveV3PoolMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AaveV3PoolMock__factory>;
    getContractFactory(
      name: 'AccountToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccountToken__factory>;
    getContractFactory(
      name: 'BalancerVaultMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BalancerVaultMock__factory>;
    getContractFactory(
      name: 'BorrowerAttacker',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BorrowerAttacker__factory>;
    getContractFactory(
      name: 'ChainLinkAggregatorMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ChainLinkAggregatorMock__factory>;
    getContractFactory(
      name: 'CommandMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CommandMock__factory>;
    getContractFactory(
      name: 'ERC20Mock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: 'FlashBorrowerMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.FlashBorrowerMock__factory>;
    getContractFactory(
      name: 'MockFlashLender',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockFlashLender__factory>;
    getContractFactory(
      name: 'ERC4626VaultMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC4626VaultMock__factory>;
    getContractFactory(
      name: 'MathLibraryWrapper',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MathLibraryWrapper__factory>;
    getContractFactory(
      name: 'OracleMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OracleMock__factory>;
    getContractFactory(
      name: 'PythMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PythMock__factory>;
    getContractFactory(
      name: 'QuoterV2Mock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.QuoterV2Mock__factory>;
    getContractFactory(
      name: 'StrategyLeverageMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyLeverageMock__factory>;
    getContractFactory(
      name: 'StrategyLeverageSettingsMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyLeverageSettingsMock__factory>;
    getContractFactory(
      name: 'StrategyMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StrategyMock__factory>;
    getContractFactory(
      name: 'UniV3RouterMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UniV3RouterMock__factory>;
    getContractFactory(
      name: 'VaultRouterMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.VaultRouterMock__factory>;
    getContractFactory(
      name: 'WETH',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: 'WstETHMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.WstETHMock__factory>;
    getContractFactory(
      name: 'ChainLinkExRateOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ChainLinkExRateOracle__factory>;
    getContractFactory(
      name: 'ChainLinkOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ChainLinkOracle__factory>;
    getContractFactory(
      name: 'CustomExRateOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CustomExRateOracle__factory>;
    getContractFactory(
      name: 'ExRateOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ExRateOracle__factory>;
    getContractFactory(
      name: 'PythOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PythOracle__factory>;
    getContractFactory(
      name: 'RatioOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RatioOracle__factory>;
    getContractFactory(
      name: 'BakerFiProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BakerFiProxy__factory>;
    getContractFactory(
      name: 'BakerFiProxyAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BakerFiProxyAdmin__factory>;
    getContractFactory(
      name: 'TestRebaseLibrary',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestRebaseLibrary__factory>;
    getContractFactory(
      name: 'LeverageTest',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LeverageTest__factory>;
    getContractFactory(
      name: 'RebaseLibraryTest',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RebaseLibraryTest__factory>;

    getContractAt(
      name: 'IIrm',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IIrm>;
    getContractAt(
      name: 'IMorpho',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMorpho>;
    getContractAt(
      name: 'IMorphoBase',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMorphoBase>;
    getContractAt(
      name: 'IMorphoStaticTyping',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMorphoStaticTyping>;
    getContractAt(
      name: 'AccessControlUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: 'IAccessControlUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: 'OwnableUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: 'IERC3156FlashBorrowerUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC3156FlashBorrowerUpgradeable>;
    getContractAt(
      name: 'IERC3156FlashLenderUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC3156FlashLenderUpgradeable>;
    getContractAt(
      name: 'IERC4626Upgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC4626Upgradeable>;
    getContractAt(
      name: 'IERC5267Upgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC5267Upgradeable>;
    getContractAt(
      name: 'Initializable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: 'PausableUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: 'ReentrancyGuardUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: 'ERC20Upgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: 'ERC20PermitUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: 'IERC20MetadataUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: 'IERC20PermitUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: 'IERC20Upgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: 'ContextUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: 'EIP712Upgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: 'ERC165Upgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: 'IERC165Upgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: 'AccessControl',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: 'IAccessControl',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: 'Ownable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: 'GovernorCompatibilityBravo',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.GovernorCompatibilityBravo>;
    getContractAt(
      name: 'IGovernorCompatibilityBravo',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IGovernorCompatibilityBravo>;
    getContractAt(
      name: 'GovernorTimelockControl',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.GovernorTimelockControl>;
    getContractAt(
      name: 'GovernorVotes',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.GovernorVotes>;
    getContractAt(
      name: 'GovernorVotesQuorumFraction',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.GovernorVotesQuorumFraction>;
    getContractAt(
      name: 'IGovernorTimelock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IGovernorTimelock>;
    getContractAt(
      name: 'Governor',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Governor>;
    getContractAt(
      name: 'IGovernor',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IGovernor>;
    getContractAt(
      name: 'TimelockController',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: 'IVotes',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: 'IERC1822Proxiable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: 'IERC1967',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: 'IERC3156FlashBorrower',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: 'IERC3156FlashLender',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: 'IERC4626',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: 'IERC5267',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: 'IERC5805',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC5805>;
    getContractAt(
      name: 'IERC6372',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC6372>;
    getContractAt(
      name: 'IBeacon',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: 'ERC1967Proxy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: 'ERC1967Upgrade',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: 'Proxy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: 'ProxyAdmin',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: 'ITransparentUpgradeableProxy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    getContractAt(
      name: 'TransparentUpgradeableProxy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: 'IERC1155Receiver',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: 'ERC20',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'ERC20Burnable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: 'ERC20Permit',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: 'ERC20Votes',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Votes>;
    getContractAt(
      name: 'IERC20Metadata',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: 'IERC20Permit',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: 'IERC20',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'IERC721Receiver',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: 'EIP712',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: 'ERC165',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: 'IERC165',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: 'ShortStrings',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: 'DoubleEndedQueue',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.DoubleEndedQueue>;
    getContractAt(
      name: 'BalancerFlashLender',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BalancerFlashLender>;
    getContractAt(
      name: 'GovernableOwnable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.GovernableOwnable>;
    getContractAt(
      name: 'BakerFiGovernor',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BakerFiGovernor>;
    getContractAt(
      name: 'BKR',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BKR>;
    getContractAt(
      name: 'Timelock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: 'UseAeroSwapper',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseAeroSwapper>;
    getContractAt(
      name: 'UseAeroSwapperMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseAeroSwapperMock>;
    getContractAt(
      name: 'UseCurveSwapper',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseCurveSwapper>;
    getContractAt(
      name: 'UseCurveSwapperMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseCurveSwapperMock>;
    getContractAt(
      name: 'UseUnifiedSwapper',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseUnifiedSwapper>;
    getContractAt(
      name: 'UseUnifiedSwapperMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseUnifiedSwapperMock>;
    getContractAt(
      name: 'UseUniV2Swapper',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseUniV2Swapper>;
    getContractAt(
      name: 'UseUniV2SwapperMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseUniV2SwapperMock>;
    getContractAt(
      name: 'UseUniV3Swapper',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseUniV3Swapper>;
    getContractAt(
      name: 'UseAAVEv3',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseAAVEv3>;
    getContractAt(
      name: 'UseFlashLender',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseFlashLender>;
    getContractAt(
      name: 'UseIERC20',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseIERC20>;
    getContractAt(
      name: 'UseIERC4626',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseIERC4626>;
    getContractAt(
      name: 'UseIERC4626Mock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseIERC4626Mock>;
    getContractAt(
      name: 'UseLeverage',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseLeverage>;
    getContractAt(
      name: 'UseOracle',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseOracle>;
    getContractAt(
      name: 'UsePermitTransfersMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UsePermitTransfersMock>;
    getContractAt(
      name: 'UseStETH',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseStETH>;
    getContractAt(
      name: 'UseStrategy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseStrategy>;
    getContractAt(
      name: 'UseTokenActions',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseTokenActions>;
    getContractAt(
      name: 'UseTokenActionsMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseTokenActionsMock>;
    getContractAt(
      name: 'UseUniQuoter',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseUniQuoter>;
    getContractAt(
      name: 'UseWETH',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseWETH>;
    getContractAt(
      name: 'UseWETHMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseWETHMock>;
    getContractAt(
      name: 'UseWstETH',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UseWstETH>;
    getContractAt(
      name: 'MultiCommand',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.MultiCommand>;
    getContractAt(
      name: 'MultiStrategy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.MultiStrategy>;
    getContractAt(
      name: 'MultiStrategyVault',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.MultiStrategyVault>;
    getContractAt(
      name: 'Commands',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Commands>;
    getContractAt(
      name: 'StrategyAeroSwapAnd',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyAeroSwapAnd>;
    getContractAt(
      name: 'StrategyCurveSwapAnd',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyCurveSwapAnd>;
    getContractAt(
      name: 'StrategyLeverage',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyLeverage>;
    getContractAt(
      name: 'StrategyLeverageAAVEv3',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyLeverageAAVEv3>;
    getContractAt(
      name: 'StrategyLeverageMorphoBlue',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyLeverageMorphoBlue>;
    getContractAt(
      name: 'StrategyLeverageSettings',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyLeverageSettings>;
    getContractAt(
      name: 'StrategyPark',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyPark>;
    getContractAt(
      name: 'StrategySettings',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategySettings>;
    getContractAt(
      name: 'StrategySupplyAAVEv3',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategySupplyAAVEv3>;
    getContractAt(
      name: 'StrategySupplyBase',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategySupplyBase>;
    getContractAt(
      name: 'StrategySupplyERC4626',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategySupplyERC4626>;
    getContractAt(
      name: 'StrategySupplyMorpho',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategySupplyMorpho>;
    getContractAt(
      name: 'StrategySwapAnd',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategySwapAnd>;
    getContractAt(
      name: 'StrategyUniV2SwapAnd',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyUniV2SwapAnd>;
    getContractAt(
      name: 'StrategyUniV3SwapAnd',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyUniV3SwapAnd>;
    getContractAt(
      name: 'Vault',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: 'VaultBase',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.VaultBase>;
    getContractAt(
      name: 'VaultRegistry',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.VaultRegistry>;
    getContractAt(
      name: 'VaultRouter',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.VaultRouter>;
    getContractAt(
      name: 'VaultSettings',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.VaultSettings>;
    getContractAt(
      name: 'IPoolAddressesProvider',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: 'IPoolV3',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPoolV3>;
    getContractAt(
      name: 'ICLSwapCallback',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICLSwapCallback>;
    getContractAt(
      name: 'ISwapRouter',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: 'IFlashLoanRecipient',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IFlashLoanRecipient>;
    getContractAt(
      name: 'IFlashLoans',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IFlashLoans>;
    getContractAt(
      name: 'IProtocolFeesCollector',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IProtocolFeesCollector>;
    getContractAt(
      name: 'IVault',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: 'IChainlinkAggregator',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IChainlinkAggregator>;
    getContractAt(
      name: 'IOracle',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: 'IStrategy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: 'IStrategyLeverage',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IStrategyLeverage>;
    getContractAt(
      name: 'IStrategySettings',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IStrategySettings>;
    getContractAt(
      name: 'ISwapHandler',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ISwapHandler>;
    getContractAt(
      name: 'IVault',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: 'IVaultRegistry',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IVaultRegistry>;
    getContractAt(
      name: 'IVaultSettings',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IVaultSettings>;
    getContractAt(
      name: 'ICurvePool',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICurvePool>;
    getContractAt(
      name: 'ICurveRouterNG',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICurveRouterNG>;
    getContractAt(
      name: 'IStETH',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IStETH>;
    getContractAt(
      name: 'IWStETH',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IWStETH>;
    getContractAt(
      name: 'IPyth',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPyth>;
    getContractAt(
      name: 'IPythEvents',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPythEvents>;
    getContractAt(
      name: 'IWETH',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: 'IUniswapV2Router01',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: 'IUniswapV2Router02',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: 'IQuoterV2',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IQuoterV2>;
    getContractAt(
      name: 'IUniswapV3Pool',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: 'IUniswapV3SwapCallback',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: 'IV3SwapRouter',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IV3SwapRouter>;
    getContractAt(
      name: 'AerodromeLibrary',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AerodromeLibrary>;
    getContractAt(
      name: 'CurveFiLibrary',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.CurveFiLibrary>;
    getContractAt(
      name: 'MathLibrary',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.MathLibrary>;
    getContractAt(
      name: 'UniV2Library',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UniV2Library>;
    getContractAt(
      name: 'UniV3Library',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UniV3Library>;
    getContractAt(
      name: 'AaveV3PoolMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AaveV3PoolMock>;
    getContractAt(
      name: 'AccountToken',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AccountToken>;
    getContractAt(
      name: 'BalancerVaultMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BalancerVaultMock>;
    getContractAt(
      name: 'BorrowerAttacker',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BorrowerAttacker>;
    getContractAt(
      name: 'ChainLinkAggregatorMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ChainLinkAggregatorMock>;
    getContractAt(
      name: 'CommandMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.CommandMock>;
    getContractAt(
      name: 'ERC20Mock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: 'FlashBorrowerMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.FlashBorrowerMock>;
    getContractAt(
      name: 'MockFlashLender',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockFlashLender>;
    getContractAt(
      name: 'ERC4626VaultMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC4626VaultMock>;
    getContractAt(
      name: 'MathLibraryWrapper',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.MathLibraryWrapper>;
    getContractAt(
      name: 'OracleMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.OracleMock>;
    getContractAt(
      name: 'PythMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.PythMock>;
    getContractAt(
      name: 'QuoterV2Mock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.QuoterV2Mock>;
    getContractAt(
      name: 'StrategyLeverageMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyLeverageMock>;
    getContractAt(
      name: 'StrategyLeverageSettingsMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyLeverageSettingsMock>;
    getContractAt(
      name: 'StrategyMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.StrategyMock>;
    getContractAt(
      name: 'UniV3RouterMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UniV3RouterMock>;
    getContractAt(
      name: 'VaultRouterMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.VaultRouterMock>;
    getContractAt(
      name: 'WETH',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.WETH>;
    getContractAt(
      name: 'WstETHMock',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.WstETHMock>;
    getContractAt(
      name: 'ChainLinkExRateOracle',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ChainLinkExRateOracle>;
    getContractAt(
      name: 'ChainLinkOracle',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ChainLinkOracle>;
    getContractAt(
      name: 'CustomExRateOracle',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.CustomExRateOracle>;
    getContractAt(
      name: 'ExRateOracle',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ExRateOracle>;
    getContractAt(
      name: 'PythOracle',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.PythOracle>;
    getContractAt(
      name: 'RatioOracle',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.RatioOracle>;
    getContractAt(
      name: 'BakerFiProxy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BakerFiProxy>;
    getContractAt(
      name: 'BakerFiProxyAdmin',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BakerFiProxyAdmin>;
    getContractAt(
      name: 'TestRebaseLibrary',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestRebaseLibrary>;
    getContractAt(
      name: 'LeverageTest',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.LeverageTest>;
    getContractAt(
      name: 'RebaseLibraryTest',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.RebaseLibraryTest>;

    deployContract(
      name: 'IIrm',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IIrm>;
    deployContract(
      name: 'IMorpho',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IMorpho>;
    deployContract(
      name: 'IMorphoBase',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IMorphoBase>;
    deployContract(
      name: 'IMorphoStaticTyping',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IMorphoStaticTyping>;
    deployContract(
      name: 'AccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: 'IAccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: 'OwnableUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: 'IERC3156FlashBorrowerUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC3156FlashBorrowerUpgradeable>;
    deployContract(
      name: 'IERC3156FlashLenderUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC3156FlashLenderUpgradeable>;
    deployContract(
      name: 'IERC4626Upgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC4626Upgradeable>;
    deployContract(
      name: 'IERC5267Upgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC5267Upgradeable>;
    deployContract(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: 'PausableUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: 'ReentrancyGuardUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: 'ERC20Upgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: 'ERC20PermitUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    deployContract(
      name: 'IERC20MetadataUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: 'IERC20PermitUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    deployContract(
      name: 'IERC20Upgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: 'ContextUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: 'EIP712Upgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: 'ERC165Upgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: 'IERC165Upgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: 'AccessControl',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: 'IAccessControl',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: 'GovernorCompatibilityBravo',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernorCompatibilityBravo>;
    deployContract(
      name: 'IGovernorCompatibilityBravo',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IGovernorCompatibilityBravo>;
    deployContract(
      name: 'GovernorTimelockControl',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernorTimelockControl>;
    deployContract(
      name: 'GovernorVotes',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernorVotes>;
    deployContract(
      name: 'GovernorVotesQuorumFraction',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernorVotesQuorumFraction>;
    deployContract(
      name: 'IGovernorTimelock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IGovernorTimelock>;
    deployContract(
      name: 'Governor',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Governor>;
    deployContract(
      name: 'IGovernor',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IGovernor>;
    deployContract(
      name: 'TimelockController',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.TimelockController>;
    deployContract(
      name: 'IVotes',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVotes>;
    deployContract(
      name: 'IERC1822Proxiable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: 'IERC1967',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC1967>;
    deployContract(
      name: 'IERC3156FlashBorrower',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC3156FlashBorrower>;
    deployContract(
      name: 'IERC3156FlashLender',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC3156FlashLender>;
    deployContract(
      name: 'IERC4626',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: 'IERC5267',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: 'IERC5805',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC5805>;
    deployContract(
      name: 'IERC6372',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC6372>;
    deployContract(
      name: 'IBeacon',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: 'ERC1967Proxy',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: 'ERC1967Upgrade',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC1967Upgrade>;
    deployContract(
      name: 'Proxy',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: 'ProxyAdmin',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ProxyAdmin>;
    deployContract(
      name: 'ITransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    deployContract(
      name: 'TransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: 'IERC1155Receiver',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: 'ERC20Burnable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: 'ERC20Permit',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: 'ERC20Votes',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Votes>;
    deployContract(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: 'IERC20Permit',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: 'IERC721Receiver',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: 'EIP712',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: 'ShortStrings',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: 'DoubleEndedQueue',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.DoubleEndedQueue>;
    deployContract(
      name: 'BalancerFlashLender',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BalancerFlashLender>;
    deployContract(
      name: 'GovernableOwnable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernableOwnable>;
    deployContract(
      name: 'BakerFiGovernor',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BakerFiGovernor>;
    deployContract(
      name: 'BKR',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BKR>;
    deployContract(
      name: 'Timelock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Timelock>;
    deployContract(
      name: 'UseAeroSwapper',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseAeroSwapper>;
    deployContract(
      name: 'UseAeroSwapperMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseAeroSwapperMock>;
    deployContract(
      name: 'UseCurveSwapper',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseCurveSwapper>;
    deployContract(
      name: 'UseCurveSwapperMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseCurveSwapperMock>;
    deployContract(
      name: 'UseUnifiedSwapper',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUnifiedSwapper>;
    deployContract(
      name: 'UseUnifiedSwapperMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUnifiedSwapperMock>;
    deployContract(
      name: 'UseUniV2Swapper',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUniV2Swapper>;
    deployContract(
      name: 'UseUniV2SwapperMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUniV2SwapperMock>;
    deployContract(
      name: 'UseUniV3Swapper',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUniV3Swapper>;
    deployContract(
      name: 'UseAAVEv3',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseAAVEv3>;
    deployContract(
      name: 'UseFlashLender',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseFlashLender>;
    deployContract(
      name: 'UseIERC20',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseIERC20>;
    deployContract(
      name: 'UseIERC4626',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseIERC4626>;
    deployContract(
      name: 'UseIERC4626Mock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseIERC4626Mock>;
    deployContract(
      name: 'UseLeverage',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseLeverage>;
    deployContract(
      name: 'UseOracle',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseOracle>;
    deployContract(
      name: 'UsePermitTransfersMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UsePermitTransfersMock>;
    deployContract(
      name: 'UseStETH',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseStETH>;
    deployContract(
      name: 'UseStrategy',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseStrategy>;
    deployContract(
      name: 'UseTokenActions',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseTokenActions>;
    deployContract(
      name: 'UseTokenActionsMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseTokenActionsMock>;
    deployContract(
      name: 'UseUniQuoter',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUniQuoter>;
    deployContract(
      name: 'UseWETH',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseWETH>;
    deployContract(
      name: 'UseWETHMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseWETHMock>;
    deployContract(
      name: 'UseWstETH',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseWstETH>;
    deployContract(
      name: 'MultiCommand',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MultiCommand>;
    deployContract(
      name: 'MultiStrategy',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MultiStrategy>;
    deployContract(
      name: 'MultiStrategyVault',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MultiStrategyVault>;
    deployContract(
      name: 'Commands',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Commands>;
    deployContract(
      name: 'StrategyAeroSwapAnd',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyAeroSwapAnd>;
    deployContract(
      name: 'StrategyCurveSwapAnd',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyCurveSwapAnd>;
    deployContract(
      name: 'StrategyLeverage',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverage>;
    deployContract(
      name: 'StrategyLeverageAAVEv3',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageAAVEv3>;
    deployContract(
      name: 'StrategyLeverageMorphoBlue',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageMorphoBlue>;
    deployContract(
      name: 'StrategyLeverageSettings',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageSettings>;
    deployContract(
      name: 'StrategyPark',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyPark>;
    deployContract(
      name: 'StrategySettings',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySettings>;
    deployContract(
      name: 'StrategySupplyAAVEv3',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySupplyAAVEv3>;
    deployContract(
      name: 'StrategySupplyBase',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySupplyBase>;
    deployContract(
      name: 'StrategySupplyERC4626',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySupplyERC4626>;
    deployContract(
      name: 'StrategySupplyMorpho',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySupplyMorpho>;
    deployContract(
      name: 'StrategySwapAnd',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySwapAnd>;
    deployContract(
      name: 'StrategyUniV2SwapAnd',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyUniV2SwapAnd>;
    deployContract(
      name: 'StrategyUniV3SwapAnd',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyUniV3SwapAnd>;
    deployContract(
      name: 'Vault',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Vault>;
    deployContract(
      name: 'VaultBase',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultBase>;
    deployContract(
      name: 'VaultRegistry',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultRegistry>;
    deployContract(
      name: 'VaultRouter',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultRouter>;
    deployContract(
      name: 'VaultSettings',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultSettings>;
    deployContract(
      name: 'IPoolAddressesProvider',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IPoolAddressesProvider>;
    deployContract(
      name: 'IPoolV3',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IPoolV3>;
    deployContract(
      name: 'ICLSwapCallback',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ICLSwapCallback>;
    deployContract(
      name: 'ISwapRouter',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: 'IFlashLoanRecipient',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IFlashLoanRecipient>;
    deployContract(
      name: 'IFlashLoans',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IFlashLoans>;
    deployContract(
      name: 'IProtocolFeesCollector',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IProtocolFeesCollector>;
    deployContract(
      name: 'IVault',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVault>;
    deployContract(
      name: 'IChainlinkAggregator',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IChainlinkAggregator>;
    deployContract(
      name: 'IOracle',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: 'IStrategy',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: 'IStrategyLeverage',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IStrategyLeverage>;
    deployContract(
      name: 'IStrategySettings',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IStrategySettings>;
    deployContract(
      name: 'ISwapHandler',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ISwapHandler>;
    deployContract(
      name: 'IVault',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVault>;
    deployContract(
      name: 'IVaultRegistry',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVaultRegistry>;
    deployContract(
      name: 'IVaultSettings',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVaultSettings>;
    deployContract(
      name: 'ICurvePool',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ICurvePool>;
    deployContract(
      name: 'ICurveRouterNG',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ICurveRouterNG>;
    deployContract(
      name: 'IStETH',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IStETH>;
    deployContract(
      name: 'IWStETH',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IWStETH>;
    deployContract(
      name: 'IPyth',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IPyth>;
    deployContract(
      name: 'IPythEvents',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IPythEvents>;
    deployContract(
      name: 'IWETH',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: 'IUniswapV2Router01',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: 'IUniswapV2Router02',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: 'IQuoterV2',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IQuoterV2>;
    deployContract(
      name: 'IUniswapV3Pool',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: 'IUniswapV3SwapCallback',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: 'IV3SwapRouter',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IV3SwapRouter>;
    deployContract(
      name: 'AerodromeLibrary',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AerodromeLibrary>;
    deployContract(
      name: 'CurveFiLibrary',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.CurveFiLibrary>;
    deployContract(
      name: 'MathLibrary',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MathLibrary>;
    deployContract(
      name: 'UniV2Library',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UniV2Library>;
    deployContract(
      name: 'UniV3Library',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UniV3Library>;
    deployContract(
      name: 'AaveV3PoolMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AaveV3PoolMock>;
    deployContract(
      name: 'AccountToken',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AccountToken>;
    deployContract(
      name: 'BalancerVaultMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BalancerVaultMock>;
    deployContract(
      name: 'BorrowerAttacker',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BorrowerAttacker>;
    deployContract(
      name: 'ChainLinkAggregatorMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ChainLinkAggregatorMock>;
    deployContract(
      name: 'CommandMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.CommandMock>;
    deployContract(
      name: 'ERC20Mock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: 'FlashBorrowerMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.FlashBorrowerMock>;
    deployContract(
      name: 'MockFlashLender',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MockFlashLender>;
    deployContract(
      name: 'ERC4626VaultMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC4626VaultMock>;
    deployContract(
      name: 'MathLibraryWrapper',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MathLibraryWrapper>;
    deployContract(
      name: 'OracleMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.OracleMock>;
    deployContract(
      name: 'PythMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.PythMock>;
    deployContract(
      name: 'QuoterV2Mock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.QuoterV2Mock>;
    deployContract(
      name: 'StrategyLeverageMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageMock>;
    deployContract(
      name: 'StrategyLeverageSettingsMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageSettingsMock>;
    deployContract(
      name: 'StrategyMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyMock>;
    deployContract(
      name: 'UniV3RouterMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UniV3RouterMock>;
    deployContract(
      name: 'VaultRouterMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultRouterMock>;
    deployContract(
      name: 'WETH',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.WETH>;
    deployContract(
      name: 'WstETHMock',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.WstETHMock>;
    deployContract(
      name: 'ChainLinkExRateOracle',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ChainLinkExRateOracle>;
    deployContract(
      name: 'ChainLinkOracle',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ChainLinkOracle>;
    deployContract(
      name: 'CustomExRateOracle',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.CustomExRateOracle>;
    deployContract(
      name: 'ExRateOracle',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ExRateOracle>;
    deployContract(
      name: 'PythOracle',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.PythOracle>;
    deployContract(
      name: 'RatioOracle',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.RatioOracle>;
    deployContract(
      name: 'BakerFiProxy',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BakerFiProxy>;
    deployContract(
      name: 'BakerFiProxyAdmin',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BakerFiProxyAdmin>;
    deployContract(
      name: 'TestRebaseLibrary',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.TestRebaseLibrary>;
    deployContract(
      name: 'LeverageTest',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.LeverageTest>;
    deployContract(
      name: 'RebaseLibraryTest',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.RebaseLibraryTest>;

    deployContract(
      name: 'IIrm',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IIrm>;
    deployContract(
      name: 'IMorpho',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IMorpho>;
    deployContract(
      name: 'IMorphoBase',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IMorphoBase>;
    deployContract(
      name: 'IMorphoStaticTyping',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IMorphoStaticTyping>;
    deployContract(
      name: 'AccessControlUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: 'IAccessControlUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: 'OwnableUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: 'IERC3156FlashBorrowerUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC3156FlashBorrowerUpgradeable>;
    deployContract(
      name: 'IERC3156FlashLenderUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC3156FlashLenderUpgradeable>;
    deployContract(
      name: 'IERC4626Upgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC4626Upgradeable>;
    deployContract(
      name: 'IERC5267Upgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC5267Upgradeable>;
    deployContract(
      name: 'Initializable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: 'PausableUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: 'ReentrancyGuardUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: 'ERC20Upgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: 'ERC20PermitUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    deployContract(
      name: 'IERC20MetadataUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: 'IERC20PermitUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    deployContract(
      name: 'IERC20Upgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: 'ContextUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: 'EIP712Upgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: 'ERC165Upgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: 'IERC165Upgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: 'AccessControl',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: 'IAccessControl',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: 'Ownable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: 'GovernorCompatibilityBravo',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernorCompatibilityBravo>;
    deployContract(
      name: 'IGovernorCompatibilityBravo',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IGovernorCompatibilityBravo>;
    deployContract(
      name: 'GovernorTimelockControl',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernorTimelockControl>;
    deployContract(
      name: 'GovernorVotes',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernorVotes>;
    deployContract(
      name: 'GovernorVotesQuorumFraction',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernorVotesQuorumFraction>;
    deployContract(
      name: 'IGovernorTimelock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IGovernorTimelock>;
    deployContract(
      name: 'Governor',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Governor>;
    deployContract(
      name: 'IGovernor',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IGovernor>;
    deployContract(
      name: 'TimelockController',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.TimelockController>;
    deployContract(
      name: 'IVotes',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVotes>;
    deployContract(
      name: 'IERC1822Proxiable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: 'IERC1967',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC1967>;
    deployContract(
      name: 'IERC3156FlashBorrower',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC3156FlashBorrower>;
    deployContract(
      name: 'IERC3156FlashLender',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC3156FlashLender>;
    deployContract(
      name: 'IERC4626',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC4626>;
    deployContract(
      name: 'IERC5267',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: 'IERC5805',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC5805>;
    deployContract(
      name: 'IERC6372',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC6372>;
    deployContract(
      name: 'IBeacon',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: 'ERC1967Proxy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: 'ERC1967Upgrade',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC1967Upgrade>;
    deployContract(
      name: 'Proxy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: 'ProxyAdmin',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ProxyAdmin>;
    deployContract(
      name: 'ITransparentUpgradeableProxy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    deployContract(
      name: 'TransparentUpgradeableProxy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: 'IERC1155Receiver',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: 'ERC20',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: 'ERC20Burnable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: 'ERC20Permit',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: 'ERC20Votes',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Votes>;
    deployContract(
      name: 'IERC20Metadata',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: 'IERC20Permit',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: 'IERC20',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: 'IERC721Receiver',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: 'EIP712',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: 'ERC165',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: 'IERC165',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: 'ShortStrings',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: 'DoubleEndedQueue',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.DoubleEndedQueue>;
    deployContract(
      name: 'BalancerFlashLender',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BalancerFlashLender>;
    deployContract(
      name: 'GovernableOwnable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.GovernableOwnable>;
    deployContract(
      name: 'BakerFiGovernor',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BakerFiGovernor>;
    deployContract(
      name: 'BKR',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BKR>;
    deployContract(
      name: 'Timelock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Timelock>;
    deployContract(
      name: 'UseAeroSwapper',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseAeroSwapper>;
    deployContract(
      name: 'UseAeroSwapperMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseAeroSwapperMock>;
    deployContract(
      name: 'UseCurveSwapper',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseCurveSwapper>;
    deployContract(
      name: 'UseCurveSwapperMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseCurveSwapperMock>;
    deployContract(
      name: 'UseUnifiedSwapper',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUnifiedSwapper>;
    deployContract(
      name: 'UseUnifiedSwapperMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUnifiedSwapperMock>;
    deployContract(
      name: 'UseUniV2Swapper',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUniV2Swapper>;
    deployContract(
      name: 'UseUniV2SwapperMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUniV2SwapperMock>;
    deployContract(
      name: 'UseUniV3Swapper',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUniV3Swapper>;
    deployContract(
      name: 'UseAAVEv3',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseAAVEv3>;
    deployContract(
      name: 'UseFlashLender',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseFlashLender>;
    deployContract(
      name: 'UseIERC20',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseIERC20>;
    deployContract(
      name: 'UseIERC4626',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseIERC4626>;
    deployContract(
      name: 'UseIERC4626Mock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseIERC4626Mock>;
    deployContract(
      name: 'UseLeverage',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseLeverage>;
    deployContract(
      name: 'UseOracle',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseOracle>;
    deployContract(
      name: 'UsePermitTransfersMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UsePermitTransfersMock>;
    deployContract(
      name: 'UseStETH',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseStETH>;
    deployContract(
      name: 'UseStrategy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseStrategy>;
    deployContract(
      name: 'UseTokenActions',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseTokenActions>;
    deployContract(
      name: 'UseTokenActionsMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseTokenActionsMock>;
    deployContract(
      name: 'UseUniQuoter',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseUniQuoter>;
    deployContract(
      name: 'UseWETH',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseWETH>;
    deployContract(
      name: 'UseWETHMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseWETHMock>;
    deployContract(
      name: 'UseWstETH',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UseWstETH>;
    deployContract(
      name: 'MultiCommand',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MultiCommand>;
    deployContract(
      name: 'MultiStrategy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MultiStrategy>;
    deployContract(
      name: 'MultiStrategyVault',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MultiStrategyVault>;
    deployContract(
      name: 'Commands',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Commands>;
    deployContract(
      name: 'StrategyAeroSwapAnd',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyAeroSwapAnd>;
    deployContract(
      name: 'StrategyCurveSwapAnd',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyCurveSwapAnd>;
    deployContract(
      name: 'StrategyLeverage',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverage>;
    deployContract(
      name: 'StrategyLeverageAAVEv3',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageAAVEv3>;
    deployContract(
      name: 'StrategyLeverageMorphoBlue',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageMorphoBlue>;
    deployContract(
      name: 'StrategyLeverageSettings',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageSettings>;
    deployContract(
      name: 'StrategyPark',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyPark>;
    deployContract(
      name: 'StrategySettings',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySettings>;
    deployContract(
      name: 'StrategySupplyAAVEv3',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySupplyAAVEv3>;
    deployContract(
      name: 'StrategySupplyBase',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySupplyBase>;
    deployContract(
      name: 'StrategySupplyERC4626',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySupplyERC4626>;
    deployContract(
      name: 'StrategySupplyMorpho',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySupplyMorpho>;
    deployContract(
      name: 'StrategySwapAnd',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategySwapAnd>;
    deployContract(
      name: 'StrategyUniV2SwapAnd',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyUniV2SwapAnd>;
    deployContract(
      name: 'StrategyUniV3SwapAnd',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyUniV3SwapAnd>;
    deployContract(
      name: 'Vault',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Vault>;
    deployContract(
      name: 'VaultBase',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultBase>;
    deployContract(
      name: 'VaultRegistry',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultRegistry>;
    deployContract(
      name: 'VaultRouter',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultRouter>;
    deployContract(
      name: 'VaultSettings',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultSettings>;
    deployContract(
      name: 'IPoolAddressesProvider',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IPoolAddressesProvider>;
    deployContract(
      name: 'IPoolV3',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IPoolV3>;
    deployContract(
      name: 'ICLSwapCallback',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ICLSwapCallback>;
    deployContract(
      name: 'ISwapRouter',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: 'IFlashLoanRecipient',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IFlashLoanRecipient>;
    deployContract(
      name: 'IFlashLoans',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IFlashLoans>;
    deployContract(
      name: 'IProtocolFeesCollector',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IProtocolFeesCollector>;
    deployContract(
      name: 'IVault',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVault>;
    deployContract(
      name: 'IChainlinkAggregator',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IChainlinkAggregator>;
    deployContract(
      name: 'IOracle',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: 'IStrategy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: 'IStrategyLeverage',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IStrategyLeverage>;
    deployContract(
      name: 'IStrategySettings',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IStrategySettings>;
    deployContract(
      name: 'ISwapHandler',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ISwapHandler>;
    deployContract(
      name: 'IVault',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVault>;
    deployContract(
      name: 'IVaultRegistry',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVaultRegistry>;
    deployContract(
      name: 'IVaultSettings',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IVaultSettings>;
    deployContract(
      name: 'ICurvePool',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ICurvePool>;
    deployContract(
      name: 'ICurveRouterNG',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ICurveRouterNG>;
    deployContract(
      name: 'IStETH',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IStETH>;
    deployContract(
      name: 'IWStETH',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IWStETH>;
    deployContract(
      name: 'IPyth',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IPyth>;
    deployContract(
      name: 'IPythEvents',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IPythEvents>;
    deployContract(
      name: 'IWETH',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: 'IUniswapV2Router01',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: 'IUniswapV2Router02',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: 'IQuoterV2',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IQuoterV2>;
    deployContract(
      name: 'IUniswapV3Pool',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: 'IUniswapV3SwapCallback',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: 'IV3SwapRouter',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IV3SwapRouter>;
    deployContract(
      name: 'AerodromeLibrary',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AerodromeLibrary>;
    deployContract(
      name: 'CurveFiLibrary',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.CurveFiLibrary>;
    deployContract(
      name: 'MathLibrary',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MathLibrary>;
    deployContract(
      name: 'UniV2Library',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UniV2Library>;
    deployContract(
      name: 'UniV3Library',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UniV3Library>;
    deployContract(
      name: 'AaveV3PoolMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AaveV3PoolMock>;
    deployContract(
      name: 'AccountToken',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AccountToken>;
    deployContract(
      name: 'BalancerVaultMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BalancerVaultMock>;
    deployContract(
      name: 'BorrowerAttacker',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BorrowerAttacker>;
    deployContract(
      name: 'ChainLinkAggregatorMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ChainLinkAggregatorMock>;
    deployContract(
      name: 'CommandMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.CommandMock>;
    deployContract(
      name: 'ERC20Mock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: 'FlashBorrowerMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.FlashBorrowerMock>;
    deployContract(
      name: 'MockFlashLender',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MockFlashLender>;
    deployContract(
      name: 'ERC4626VaultMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC4626VaultMock>;
    deployContract(
      name: 'MathLibraryWrapper',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.MathLibraryWrapper>;
    deployContract(
      name: 'OracleMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.OracleMock>;
    deployContract(
      name: 'PythMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.PythMock>;
    deployContract(
      name: 'QuoterV2Mock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.QuoterV2Mock>;
    deployContract(
      name: 'StrategyLeverageMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageMock>;
    deployContract(
      name: 'StrategyLeverageSettingsMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyLeverageSettingsMock>;
    deployContract(
      name: 'StrategyMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.StrategyMock>;
    deployContract(
      name: 'UniV3RouterMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UniV3RouterMock>;
    deployContract(
      name: 'VaultRouterMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.VaultRouterMock>;
    deployContract(
      name: 'WETH',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.WETH>;
    deployContract(
      name: 'WstETHMock',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.WstETHMock>;
    deployContract(
      name: 'ChainLinkExRateOracle',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ChainLinkExRateOracle>;
    deployContract(
      name: 'ChainLinkOracle',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ChainLinkOracle>;
    deployContract(
      name: 'CustomExRateOracle',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.CustomExRateOracle>;
    deployContract(
      name: 'ExRateOracle',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ExRateOracle>;
    deployContract(
      name: 'PythOracle',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.PythOracle>;
    deployContract(
      name: 'RatioOracle',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.RatioOracle>;
    deployContract(
      name: 'BakerFiProxy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BakerFiProxy>;
    deployContract(
      name: 'BakerFiProxyAdmin',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BakerFiProxyAdmin>;
    deployContract(
      name: 'TestRebaseLibrary',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.TestRebaseLibrary>;
    deployContract(
      name: 'LeverageTest',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.LeverageTest>;
    deployContract(
      name: 'RebaseLibraryTest',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.RebaseLibraryTest>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<ethers.Contract>;
  }
}
