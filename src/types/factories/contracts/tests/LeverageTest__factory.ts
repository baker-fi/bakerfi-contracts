/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type { LeverageTest, LeverageTestInterface } from '../../../contracts/tests/LeverageTest';

const _abi = [
  {
    inputs: [],
    name: 'InvalidDivisor',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidLoanToValue',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidNumberOfLoops',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidPercentageValue',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidTargetValue',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'percentageToBurn',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'totalCollateralBaseInEth',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'totalDebtBaseInEth',
        type: 'uint256',
      },
    ],
    name: 'calcDeltaPosition',
    outputs: [
      {
        internalType: 'uint256',
        name: 'deltaCollateralInETH',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deltaDebtInETH',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'targetLoanToValue',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'collateral',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'debt',
        type: 'uint256',
      },
    ],
    name: 'calculateDebtToPay',
    outputs: [
      {
        internalType: 'uint256',
        name: 'delta',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'baseValue',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'loanToValue',
        type: 'uint256',
      },
      {
        internalType: 'uint8',
        name: 'nrLoops',
        type: 'uint8',
      },
    ],
    name: 'calculateLeverageRatio',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b506103b6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806317a8dc0714610046578063342ef8c11461006c578063537b132d14610094575b600080fd5b61005961005436600461029a565b6100a7565b6040519081526020015b60405180910390f35b61007f61007a36600461029a565b6100bc565b60408051928352602083019190915201610063565b6100596100a23660046102c6565b6100d6565b60006100b48484846100e3565b949350505050565b6000806100ca858585610186565b91509150935093915050565b60006100b48484846101f5565b600080633b9aca006100f5858761031b565b6100ff9190610338565b905082811061012157604051633c38d1b560e11b815260040160405180910390fd5b600061012d828561035a565b9050600061013f87633b9aca0061035a565b90508060000361016257604051635281626d60e01b815260040160405180910390fd5b80610171633b9aca008461031b565b61017b9190610338565b979650505050505050565b6000808415806101995750633b9aca0085115b156101b75760405163a15aaf3960e01b815260040160405180910390fd5b633b9aca006101c6868561031b565b6101d09190610338565b9050633b9aca006101e1868661031b565b6101eb9190610338565b9150935093915050565b6000601460ff8316111561021c57604051637a035b7160e01b815260040160405180910390fd5b82158061022c5750633b9aca0083115b1561024a576040516343e47d7560e01b815260040160405180910390fd5b838060015b8460ff168160ff161161028f576000633b9aca0061026d888561031b565b6102779190610338565b9050610283818561036d565b9350915060010161024f565b509095945050505050565b6000806000606084860312156102af57600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156102db57600080fd5b8335925060208401359150604084013560ff811681146102fa57600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761033257610332610305565b92915050565b60008261035557634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561033257610332610305565b808201808211156103325761033261030556fea26469706673582212204501e810a89e9fbe4b80ee51d9905369a86794fe7426d63e2e4c436c305185e264736f6c63430008180033';

type LeverageTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LeverageTestConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LeverageTest__factory extends ContractFactory {
  constructor(...args: LeverageTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LeverageTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LeverageTest__factory {
    return super.connect(runner) as LeverageTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LeverageTestInterface {
    return new Interface(_abi) as LeverageTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LeverageTest {
    return new Contract(address, _abi, runner) as unknown as LeverageTest;
  }
}
