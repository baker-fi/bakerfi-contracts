/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers';
import type {
  UseUniV3Swapper,
  UseUniV3SwapperInterface,
} from '../../../../../contracts/core/hooks/swappers/UseUniV3Swapper';

const _abi = [
  {
    inputs: [],
    name: 'FailedToApproveAllowanceForRouter',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidFeeTier',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidInputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidOutputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidUniRouterContract',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SwapFailed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'uniRouter',
    outputs: [
      {
        internalType: 'contract IV3SwapRouter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class UseUniV3Swapper__factory {
  static readonly abi = _abi;
  static createInterface(): UseUniV3SwapperInterface {
    return new Interface(_abi) as UseUniV3SwapperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UseUniV3Swapper {
    return new Contract(address, _abi, runner) as unknown as UseUniV3Swapper;
  }
}
