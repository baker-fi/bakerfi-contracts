/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  UseCurveSwapperMock,
  UseCurveSwapperMockInterface,
} from "../../../../../../contracts/core/hooks/swappers/UseCurveSwapper.sol/UseCurveSwapperMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ICurveRouterNG",
        name: "icurveRouterNG",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FailedToApproveAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCurveRouterContract",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInputToken",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOutputToken",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedSwapType",
    type: "error",
  },
  {
    inputs: [],
    name: "ETH_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "curveRouter",
    outputs: [
      {
        internalType: "contract ICurveRouterNG",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "underlyingIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "underlyingOut",
            type: "address",
          },
          {
            internalType: "enum ISwapHandler.SwapType",
            name: "mode",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct ISwapHandler.SwapParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "test__swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a87380380610a8783398101604081905261002f91610089565b6100388161003e565b506100b9565b6001600160a01b0381166100655760405163b90e00fb60e01b815260040160405180910390fd5b7f12bf5c1f8c71d2ab50ad26cd63e0f5c50ba43161b985f5d4c823c1c5b55e3f1b55565b60006020828403121561009b57600080fd5b81516001600160a01b03811681146100b257600080fd5b9392505050565b6109bf806100c86000396000f3fe6080604052600436106100345760003560e01c8063a734f06e14610039578063cda90b881461007e578063f2c93b94146100b2575b600080fd5b34801561004557600080fd5b5061006173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561008a57600080fd5b507f12bf5c1f8c71d2ab50ad26cd63e0f5c50ba43161b985f5d4c823c1c5b55e3f1b54610061565b6100c56100c03660046106e8565b6100da565b60408051928352602083019190915201610075565b6000806100e6836100ef565b91509150915091565b6000806100e661011d7f12bf5c1f8c71d2ab50ad26cd63e0f5c50ba43161b985f5d4c823c1c5b55e3f1b5490565b84805160009081906001600160a01b031661014b57604051632df9739b60e01b815260040160405180910390fd5b60208301516001600160a01b0316610175576040516231010160e51b815260040160405180910390fd5b61017d61059a565b6101856105b9565b61018d6105e6565b60008060008060008a60a001518060200190518101906101ad91906107a8565b8f51949950929750909550935091508860006001600160a01b039092166020929092020152808860016001600160a01b03909216602092830291909101528b01518860026001600160a01b039092166020929092020152808660006001600160a01b03909216602092830291909101526040805160a0810182528781529182018690528101849052606081018390526002608082015287600060200201526102588c8989898f61026b565b9950995050505050505050509250929050565b6000808083604001516001811115610285576102856107f5565b036103685782516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146102b95782606001516102bb565b345b608084015160405163c872a3c560e01b81529193506001600160a01b0389169163c872a3c59134916102f9918b918b9189918c9030906004016108c1565b60206040518083038185885af1158015610317573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061033c9190610917565b905082608001518110156103635760405163081ceff360e41b815260040160405180910390fd5b610590565b600183604001516001811115610380576103806107f5565b036105775761038d6105e6565b6103956105e6565b60808501516040516390e7e20560e01b81526000916001600160a01b038c16916390e7e205916103d1918d918d918d908a908a90600401610930565b602060405180830381865afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104129190610917565b86519091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14801561044157503481115b80610478575085516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015906104785750856060015181115b1561049657604051631e9acf1760e31b815260040160405180910390fd5b85516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146104c55785606001516104c7565b345b608087015160405163c872a3c560e01b81529196506001600160a01b038c169163c872a3c5918891610505918e918e9185918f9030906004016108c1565b60206040518083038185885af1158015610523573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105489190610917565b9350856080015184101561056f5760405163081ceff360e41b815260040160405180910390fd5b505050610590565b60405163c8bde22760e01b815260040160405180910390fd5b9550959350505050565b604051806101600160405280600b906020820280368337509192915050565b6040518060a001604052806005905b6105d06105e6565b8152602001906001900390816105c85790505090565b6040518060a001604052806005906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561063d5761063d610604565b60405290565b6001600160a01b038116811461065857600080fd5b50565b600082601f83011261066c57600080fd5b813567ffffffffffffffff8082111561068757610687610604565b604051601f8301601f19908116603f011681019082821181831017156106af576106af610604565b816040528381528660208588010111156106c857600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156106fa57600080fd5b813567ffffffffffffffff8082111561071257600080fd5b9083019060c0828603121561072657600080fd5b61072e61061a565b823561073981610643565b8152602083013561074981610643565b602082015260408301356002811061076057600080fd5b80604083015250606083013560608201526080830135608082015260a08301358281111561078d57600080fd5b6107998782860161065b565b60a08301525095945050505050565b600080600080600060a086880312156107c057600080fd5b8551945060208601519350604086015192506060860151915060808601516107e781610643565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b8060005b600b8110156108375781516001600160a01b031684526020938401939091019060010161080f565b50505050565b806000805b6005808210610851575061088e565b835186845b83811015610874578251825260209283019290910190600101610856565b50505060a095909501945060209290920191600101610842565b5050505050565b8060005b60058110156108375781516001600160a01b0316845260209384019390910190600101610899565b61058081016108d0828961080b565b6108de61016083018861083d565b85610480830152846104a08301526108fa6104c0830185610895565b6001600160a01b0392909216610560919091015295945050505050565b60006020828403121561092957600080fd5b5051919050565b610680810161093f828961080b565b61094d61016083018861083d565b856104808301526109626104a0830186610895565b610970610540830185610895565b61097e6105e0830184610895565b97965050505050505056fea2646970667358221220dd72f9bdbf3cd500aa8b21b2134f098c557f5b9f064b59421980de3b448e38af64736f6c63430008180033";

type UseCurveSwapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UseCurveSwapperMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UseCurveSwapperMock__factory extends ContractFactory {
  constructor(...args: UseCurveSwapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    icurveRouterNG: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(icurveRouterNG, overrides || {});
  }
  override deploy(
    icurveRouterNG: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(icurveRouterNG, overrides || {}) as Promise<
      UseCurveSwapperMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): UseCurveSwapperMock__factory {
    return super.connect(runner) as UseCurveSwapperMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UseCurveSwapperMockInterface {
    return new Interface(_abi) as UseCurveSwapperMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UseCurveSwapperMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as UseCurveSwapperMock;
  }
}
