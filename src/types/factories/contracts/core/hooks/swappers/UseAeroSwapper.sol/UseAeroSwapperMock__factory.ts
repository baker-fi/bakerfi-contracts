/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../../../../common';
import type {
  UseAeroSwapperMock,
  UseAeroSwapperMockInterface,
} from '../../../../../../contracts/core/hooks/swappers/UseAeroSwapper.sol/UseAeroSwapperMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract ISwapRouter',
        name: 'iAeroRouter',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'FailedToApproveAllowanceForSwapRouter',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidAeroRouterContract',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidInputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidInputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidOutputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidOutputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SwapFailed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SwapFailed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'aeroRouter',
    outputs: [
      {
        internalType: 'contract ISwapRouter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlyingIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'underlyingOut',
            type: 'address',
          },
          {
            internalType: 'enum ISwapHandler.SwapType',
            name: 'mode',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'payload',
            type: 'bytes',
          },
        ],
        internalType: 'struct ISwapHandler.SwapParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'test__swap',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: 'token',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'test_allowRouterSpend',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b506040516107c33803806107c383398101604081905261002f9161007c565b6100388161003e565b506100ac565b600080546001600160a01b0319166001600160a01b0383169081179091556100795760405163a0b3bbad60e01b815260040160405180910390fd5b50565b60006020828403121561008e57600080fd5b81516001600160a01b03811681146100a557600080fd5b9392505050565b610708806100bb6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631909c2a8146100465780635d1a23e114610066578063f2c93b941461007b575b600080fd5b6000546040516001600160a01b0390911681526020015b60405180910390f35b610079610074366004610431565b6100a3565b005b61008e610089366004610529565b6100b1565b6040805192835260208301919091520161005d565b6100ad82826100c6565b5050565b6000806100bd8361015a565b91509150915091565b60005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b3906044016020604051808303816000875af1158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d91906105e9565b6100ad5760405163a1404d1160e01b815260040160405180910390fd5b6000806100bd6101726000546001600160a01b031690565b84805160009081906001600160a01b03166101a057604051632df9739b60e01b815260040160405180910390fd5b60208301516001600160a01b03166101ca576040516231010160e51b815260040160405180910390fd5b60008360a001518060200190518101906101e49190610612565b90506000846040015160018111156101fe576101fe610635565b0361030e5783606001519250846001600160a01b031663a026383e60405180610100016040528087600001516001600160a01b0316815260200187602001516001600160a01b031681526020018460020b8152602001306001600160a01b031681526020014281526020018681526020018760800151815260200160006001600160a01b03168152506040518263ffffffff1660e01b81526004016102a3919061064b565b6020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906106b9565b9150816000036103095760405163081ceff360e41b815260040160405180910390fd5b610411565b60018460400151600181111561032657610326610635565b036104115783608001519150846001600160a01b031663c714e83860405180610100016040528087600001516001600160a01b0316815260200187602001516001600160a01b031681526020018460020b8152602001306001600160a01b031681526020014281526020018581526020018760600151815260200160006001600160a01b03168152506040518263ffffffff1660e01b81526004016103cb919061064b565b6020604051808303816000875af11580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e91906106b9565b92505b509250929050565b6001600160a01b038116811461042e57600080fd5b50565b6000806040838503121561044457600080fd5b823561044f81610419565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156104965761049661045d565b60405290565b600082601f8301126104ad57600080fd5b813567ffffffffffffffff808211156104c8576104c861045d565b604051601f8301601f19908116603f011681019082821181831017156104f0576104f061045d565b8160405283815286602085880101111561050957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561053b57600080fd5b813567ffffffffffffffff8082111561055357600080fd5b9083019060c0828603121561056757600080fd5b61056f610473565b823561057a81610419565b8152602083013561058a81610419565b60208201526040830135600281106105a157600080fd5b80604083015250606083013560608201526080830135608082015260a0830135828111156105ce57600080fd5b6105da8782860161049c565b60a08301525095945050505050565b6000602082840312156105fb57600080fd5b8151801515811461060b57600080fd5b9392505050565b60006020828403121561062457600080fd5b81518060020b811461060b57600080fd5b634e487b7160e01b600052602160045260246000fd5b61010081016106b3828480516001600160a01b03908116835260208083015182169084015260408083015160020b908401526060808301518216908401526080808301519084015260a0828101519084015260c0808301519084015260e09182015116910152565b92915050565b6000602082840312156106cb57600080fd5b505191905056fea26469706673582212203706d9d1e5a8509c21096174f74c6bc74923cc1f46d1a37de33150351549fa9864736f6c63430008180033';

type UseAeroSwapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UseAeroSwapperMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UseAeroSwapperMock__factory extends ContractFactory {
  constructor(...args: UseAeroSwapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    iAeroRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(iAeroRouter, overrides || {});
  }
  override deploy(iAeroRouter: AddressLike, overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(iAeroRouter, overrides || {}) as Promise<
      UseAeroSwapperMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UseAeroSwapperMock__factory {
    return super.connect(runner) as UseAeroSwapperMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UseAeroSwapperMockInterface {
    return new Interface(_abi) as UseAeroSwapperMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UseAeroSwapperMock {
    return new Contract(address, _abi, runner) as unknown as UseAeroSwapperMock;
  }
}
