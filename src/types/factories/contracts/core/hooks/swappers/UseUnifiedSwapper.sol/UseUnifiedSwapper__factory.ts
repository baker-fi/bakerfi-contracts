/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  UseUnifiedSwapper,
  UseUnifiedSwapperInterface,
} from "../../../../../../contracts/core/hooks/swappers/UseUnifiedSwapper.sol/UseUnifiedSwapper";

const _abi = [
  {
    inputs: [],
    name: "CallerNotTheGovernor",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedToApproveAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidGovernorAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInputToken",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOutputToken",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProvider",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "RouteAlreadyAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "RouteNotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousGovernor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGovernor",
        type: "address",
      },
    ],
    name: "GovernshipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
    ],
    name: "disableRoute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum UseUnifiedSwapper.SwapProvider",
            name: "provider",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "router",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "uniV3Tier",
            type: "uint24",
          },
          {
            internalType: "uint24",
            name: "tickSpacing",
            type: "uint24",
          },
        ],
        internalType: "struct UseUnifiedSwapper.RouteInfo",
        name: "routeInfo",
        type: "tuple",
      },
    ],
    name: "enableRoute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
    ],
    name: "isRouteEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newGovernor",
        type: "address",
      },
    ],
    name: "transferGovernorship",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class UseUnifiedSwapper__factory {
  static readonly abi = _abi;
  static createInterface(): UseUnifiedSwapperInterface {
    return new Interface(_abi) as UseUnifiedSwapperInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UseUnifiedSwapper {
    return new Contract(address, _abi, runner) as unknown as UseUnifiedSwapper;
  }
}
