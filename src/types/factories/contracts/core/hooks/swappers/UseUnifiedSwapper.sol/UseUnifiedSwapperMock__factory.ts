/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../../../../common';
import type {
  UseUnifiedSwapperMock,
  UseUnifiedSwapperMockInterface,
} from '../../../../../../contracts/core/hooks/swappers/UseUnifiedSwapper.sol/UseUnifiedSwapperMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'CallerNotTheGovernor',
    type: 'error',
  },
  {
    inputs: [],
    name: 'FailedToApproveAllowance',
    type: 'error',
  },
  {
    inputs: [],
    name: 'FailedToApproveAllowance',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidFeeTier',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidGovernorAddress',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidInputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidInputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidInputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidInputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidOutputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidOutputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidOutputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidOutputToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidProvider',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidRouter',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RouteAlreadyAuthorized',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RouteNotAuthorized',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SwapFailed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SwapFailed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SwapFailed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SwapFailed',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousGovernor',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newGovernor',
        type: 'address',
      },
    ],
    name: 'GovernshipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint8',
        name: 'version',
        type: 'uint8',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'tokenIn',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'tokenOut',
        type: 'address',
      },
    ],
    name: 'disableRoute',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'tokenIn',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'tokenOut',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'enum UseUnifiedSwapper.SwapProvider',
            name: 'provider',
            type: 'uint8',
          },
          {
            internalType: 'address',
            name: 'router',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'uniV3Tier',
            type: 'uint24',
          },
          {
            internalType: 'uint24',
            name: 'tickSpacing',
            type: 'uint24',
          },
        ],
        internalType: 'struct UseUnifiedSwapper.RouteInfo',
        name: 'routeInfo',
        type: 'tuple',
      },
    ],
    name: 'enableRoute',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governor',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'tokenIn',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'tokenOut',
        type: 'address',
      },
    ],
    name: 'isRouteEnabled',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlyingIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'underlyingOut',
            type: 'address',
          },
          {
            internalType: 'enum ISwapHandler.SwapType',
            name: 'mode',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'payload',
            type: 'bytes',
          },
        ],
        internalType: 'struct ISwapHandler.SwapParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'test__swap',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newGovernor',
        type: 'address',
      },
    ],
    name: 'transferGovernorship',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5061001a33610028565b6100233361007a565b6100d6565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6065546040516001600160a01b038084169216907f4a2da5517922d469e27cc43b2e88ebd65d79400caf5bb7cc34419e64cf85bb1a90600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b611a39806100e56000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a61461010d5780638da5cb5b14610115578063b6aa515b14610126578063f2c93b9414610139578063f2fde38b1461016157600080fd5b80630722f9c2146100985780630c340a24146100ad57806315a97e97146100d7578063323ec347146100ea575b600080fd5b6100ab6100a63660046114b2565b610174565b005b6065546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab6100e5366004611571565b6103c0565b6100fd6100f8366004611571565b6105a1565b60405190151581526020016100ce565b6100ab6105e0565b6033546001600160a01b03166100ba565b6100ab6101343660046115a4565b6105f4565b61014c610147366004611636565b610652565b604080519283526020830191909152016100ce565b6100ab61016f3660046115a4565b610667565b6065546001600160a01b0316331461019f5760405163e6e025c760e01b815260040160405180910390fd5b60006101ab84846106e2565b90506000808281526066602052604090205460ff1660038111156101d1576101d16116f2565b146101ef57604051632291fe5360e21b815260040160405180910390fd5b602082015160405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529085169063095ea7b3906044016020604051808303816000875af1158015610245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102699190611708565b610286576040516302e8763f60e31b815260040160405180910390fd5b602082015160405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529084169063095ea7b3906044016020604051808303816000875af11580156102dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103009190611708565b61031d576040516302e8763f60e31b815260040160405180910390fd5b60008181526066602052604090208251815484929190829060ff1916600183600381111561034d5761034d6116f2565b021790555060208201518154604084015160609094015162ffffff908116600160c01b0262ffffff60c01b1991909516600160a81b0262ffffff60a81b196001600160a01b039094166101000293909316610100600160c01b031990921691909117919091171691909117905550505050565b6065546001600160a01b031633146103eb5760405163e6e025c760e01b815260040160405180910390fd5b60006103f783836106e2565b90506000808281526066602052604090205460ff16600381111561041d5761041d6116f2565b0361043b5760405163139f8d8760e11b815260040160405180910390fd5b6000818152606660205260409081902054905163095ea7b360e01b81526101009091046001600160a01b0390811660048301526001602483015284169063095ea7b3906044016020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190611708565b6104e1576040516302e8763f60e31b815260040160405180910390fd5b6000818152606660205260409081902054905163095ea7b360e01b81526101009091046001600160a01b0390811660048301526001602483015283169063095ea7b3906044016020604051808303816000875af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190611708565b610587576040516302e8763f60e31b815260040160405180910390fd5b6000908152606660205260409020805460ff191690555050565b6000806105ae84846106e2565b90506000808281526066602052604090205460ff1660038111156105d4576105d46116f2565b14159150505b92915050565b6105e861076d565b6105f260006107c7565b565b6065546001600160a01b0316331461061f5760405163e6e025c760e01b815260040160405180910390fd5b6001600160a01b0381166106465760405163fa68714160e01b815260040160405180910390fd5b61064f81610819565b50565b60008061065e83610875565b91509150915091565b61066f61076d565b6001600160a01b0381166106d95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61064f816107c7565b6000816001600160a01b0316836001600160a01b03161061072057604080518082019091526001600160a01b0380841682528416602082015261073f565b604080518082019091526001600160a01b038085168252831660208201525b60405160200161074f919061172a565b60405160208183030381529060405280519060200120905092915050565b6033546001600160a01b031633146105f25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106d0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6065546040516001600160a01b038084169216907f4a2da5517922d469e27cc43b2e88ebd65d79400caf5bb7cc34419e64cf85bb1a90600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b600080600061088c846000015185602001516106e2565b60008181526066602052604080822081516080810190925280549394509192909190829060ff1660038111156108c4576108c46116f2565b60038111156108d5576108d56116f2565b815290546001600160a01b03610100820416602083015262ffffff600160a81b820481166040840152600160c01b909104166060909101529050600081516003811115610924576109246116f2565b036109425760405163139f8d8760e11b815260040160405180910390fd5b600181516003811115610957576109576116f2565b036109a057604080820151815162ffffff90911660208201520160408051601f1981840301815291905260a086015260208101516109959086610a35565b935093505050915091565b6002815160038111156109b5576109b56116f2565b036109c857610995816020015186610cf7565b6003815160038111156109dd576109dd6116f2565b03610a1c5760608101516040805162ffffff90921660208301520160408051601f1981840301815291905260a086015260208101516109959086611228565b604051633b136dc160e11b815260040160405180910390fd5b805160009081906001600160a01b0316610a6257604051632df9739b60e01b815260040160405180910390fd5b60208301516001600160a01b0316610a8c576040516231010160e51b815260040160405180910390fd5b60008360a00151806020019051810190610aa69190611764565b90508062ffffff16600003610ace57604051631b99aa4560e11b815260040160405180910390fd5b600084604001516001811115610ae657610ae66116f2565b03610bf15783606001519250846001600160a01b03166304e45aaf6040518060e0016040528087600001516001600160a01b0316815260200187602001516001600160a01b031681526020018462ffffff168152602001306001600160a01b031681526020018681526020018760800151815260200160006001600160a01b03168152506040518263ffffffff1660e01b8152600401610b869190611781565b6020604051808303816000875af1158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc991906117e0565b915081600003610bec5760405163081ceff360e41b815260040160405180910390fd5b610cef565b600184604001516001811115610c0957610c096116f2565b03610cef5783608001519150846001600160a01b0316635023b4df6040518060e0016040528087600001516001600160a01b0316815260200187602001516001600160a01b031681526020018462ffffff168152602001306001600160a01b031681526020018581526020018760600151815260200160006001600160a01b03168152506040518263ffffffff1660e01b8152600401610ca99190611781565b6020604051808303816000875af1158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec91906117e0565b92505b509250929050565b805160009081906001600160a01b0316610d2457604051632df9739b60e01b815260040160405180910390fd5b60208301516001600160a01b0316610d4e576040516231010160e51b815260040160405180910390fd5b604080516002808252606082018352600092602083019080368337019050509050836000015181600081518110610d8757610d876117f9565b60200260200101906001600160a01b031690816001600160a01b031681525050836020015181600181518110610dbf57610dbf6117f9565b6001600160a01b0390921660209283029190910190910152600084604001516001811115610def57610def6116f2565b03611000578351606085015160405163095ea7b360e01b81526001600160a01b038881166004830152602482019290925291169063095ea7b3906044016020604051808303816000875af1158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f9190611708565b610e8c576040516302e8763f60e31b815260040160405180910390fd5b608084015160009015610ea457506080840151610f4a565b606085015160405163d06ca61f60e01b81526000916001600160a01b0389169163d06ca61f91610ed8918790600401611854565b600060405180830381865afa158015610ef5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f1d9190810190611875565b90508060018251610f2e919061191b565b81518110610f3e57610f3e6117f9565b60200260200101519150505b846060015193506000866001600160a01b03166338ed173986848630426040518663ffffffff1660e01b8152600401610f8795949392919061193c565b6000604051808303816000875af1158015610fa6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fce9190810190611875565b90508060018251610fdf919061191b565b81518110610fef57610fef6117f9565b602002602001015193505050611207565b600184604001516001811115611018576110186116f2565b036112075783608001519150600084606001516000036110cd576040516307c0329d60e21b81526000906001600160a01b03881690631f00ca74906110639087908790600401611854565b600060405180830381865afa158015611080573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a89190810190611875565b9050806000815181106110bd576110bd6117f9565b60200260200101519150506110d4565b5060608401515b845160405163095ea7b360e01b81526001600160a01b038881166004830152602482018490529091169063095ea7b3906044016020604051808303816000875af1158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a9190611708565b611167576040516302e8763f60e31b815260040160405180910390fd5b604051634401edf760e11b81526000906001600160a01b03881690638803dbee9061119e908790869088903090429060040161193c565b6000604051808303816000875af11580156111bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111e59190810190611875565b9050806000815181106111fa576111fa6117f9565b6020026020010151945050505b81600003610cef5760405163081ceff360e41b815260040160405180910390fd5b805160009081906001600160a01b031661125557604051632df9739b60e01b815260040160405180910390fd5b60208301516001600160a01b031661127f576040516231010160e51b815260040160405180910390fd5b60008360a001518060200190518101906112999190611978565b90506000846040015160018111156112b3576112b36116f2565b036113585783606001519250846001600160a01b031663a026383e60405180610100016040528087600001516001600160a01b0316815260200187602001516001600160a01b031681526020018460020b8152602001306001600160a01b031681526020014281526020018681526020018760800151815260200160006001600160a01b03168152506040518263ffffffff1660e01b8152600401610b86919061199b565b600184604001516001811115611370576113706116f2565b03610cef5783608001519150846001600160a01b031663c714e83860405180610100016040528087600001516001600160a01b0316815260200187602001516001600160a01b031681526020018460020b8152602001306001600160a01b031681526020014281526020018581526020018760600151815260200160006001600160a01b03168152506040518263ffffffff1660e01b8152600401610ca9919061199b565b80356001600160a01b038116811461142c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561146a5761146a611431565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561149957611499611431565b604052919050565b62ffffff8116811461064f57600080fd5b600080600083850360c08112156114c857600080fd5b6114d185611415565b93506114df60208601611415565b92506080603f19820112156114f357600080fd5b506040516080810181811067ffffffffffffffff8211171561151757611517611431565b60409081528501356004811061152c57600080fd5b815261153a60608601611415565b6020820152608085013561154d816114a1565b604082015260a0850135611560816114a1565b606082015292959194509192509050565b6000806040838503121561158457600080fd5b61158d83611415565b915061159b60208401611415565b90509250929050565b6000602082840312156115b657600080fd5b6115bf82611415565b9392505050565b600082601f8301126115d757600080fd5b813567ffffffffffffffff8111156115f1576115f1611431565b611604601f8201601f1916602001611470565b81815284602083860101111561161957600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561164857600080fd5b813567ffffffffffffffff8082111561166057600080fd5b9083019060c0828603121561167457600080fd5b61167c611447565b61168583611415565b815261169360208401611415565b60208201526040830135600281106116aa57600080fd5b80604083015250606083013560608201526080830135608082015260a0830135828111156116d757600080fd5b6116e3878286016115c6565b60a08301525095945050505050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561171a57600080fd5b815180151581146115bf57600080fd5b60408101818360005b600281101561175b5781516001600160a01b0316835260209283019290910190600101611733565b50505092915050565b60006020828403121561177657600080fd5b81516115bf816114a1565b60e081016105da828480516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c09182015116910152565b6000602082840312156117f257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b838110156118495781516001600160a01b031687529582019590820190600101611824565b509495945050505050565b82815260406020820152600061186d604083018461180f565b949350505050565b6000602080838503121561188857600080fd5b825167ffffffffffffffff808211156118a057600080fd5b818501915085601f8301126118b457600080fd5b8151818111156118c6576118c6611431565b8060051b91506118d7848301611470565b81815291830184019184810190888411156118f157600080fd5b938501935b8385101561190f578451825293850193908501906118f6565b98975050505050505050565b818103818111156105da57634e487b7160e01b600052601160045260246000fd5b85815284602082015260a06040820152600061195b60a083018661180f565b6001600160a01b0394909416606083015250608001529392505050565b60006020828403121561198a57600080fd5b81518060020b81146115bf57600080fd5b61010081016105da828480516001600160a01b03908116835260208083015182169084015260408083015160020b908401526060808301518216908401526080808301519084015260a0828101519084015260c0808301519084015260e0918201511691015256fea26469706673582212203a2801f5124284e90e523f32083104069bf0b2f13bf2c2a632dab96d21e1212c64736f6c63430008180033';

type UseUnifiedSwapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UseUnifiedSwapperMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UseUnifiedSwapperMock__factory extends ContractFactory {
  constructor(...args: UseUnifiedSwapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UseUnifiedSwapperMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UseUnifiedSwapperMock__factory {
    return super.connect(runner) as UseUnifiedSwapperMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UseUnifiedSwapperMockInterface {
    return new Interface(_abi) as UseUnifiedSwapperMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UseUnifiedSwapperMock {
    return new Contract(address, _abi, runner) as unknown as UseUnifiedSwapperMock;
  }
}
