/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../../../common';
import type {
  UsePermitTransfersMock,
  UsePermitTransfersMockInterface,
} from '../../../../../contracts/core/hooks/UsePermitTransfers.sol/UsePermitTransfersMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IERC20Permit',
        name: 'token',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'test__pullTokensWithPermit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b50610520806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631cf7fe7c14610030575b600080fd5b61004361003e3660046103d7565b610045565b005b6100548787878787878761005d565b50505050505050565b60405163d505accf60e01b81526001600160a01b038681166004830152306024830152604482018890526064820186905260ff8516608483015260a4820184905260c4820183905288169063d505accf9060e401600060405180830381600087803b1580156100cb57600080fd5b505af11580156100df573d6000803e3d6000fd5b5050604080516001600160a01b038981166024830152306044830181905260648084018d90528451808503909101815260849093019093526020820180516001600160e01b03166323b872dd60e01b17905261005494508b1692508891908a9061014a908590610150565b50505050565b60006101a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661022f9092919063ffffffff16565b90508051600014806101c65750808060200190518101906101c6919061044e565b61022a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b606061023e8484600085610246565b949350505050565b6060824710156102a75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610221565b600080866001600160a01b031685876040516102c3919061049b565b60006040518083038185875af1925050503d8060008114610300576040519150601f19603f3d011682016040523d82523d6000602084013e610305565b606091505b509150915061031687838387610321565b979650505050505050565b60608315610390578251600003610389576001600160a01b0385163b6103895760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610221565b508161023e565b61023e83838151156103a55781518083602001fd5b8060405162461bcd60e51b815260040161022191906104b7565b6001600160a01b03811681146103d457600080fd5b50565b600080600080600080600060e0888a0312156103f257600080fd5b87356103fd816103bf565b9650602088013595506040880135610414816103bf565b945060608801359350608088013560ff8116811461043157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60006020828403121561046057600080fd5b8151801515811461047057600080fd5b9392505050565b60005b8381101561049257818101518382015260200161047a565b50506000910152565b600082516104ad818460208701610477565b9190910192915050565b60208152600082518060208401526104d6816040850160208701610477565b601f01601f1916919091016040019291505056fea26469706673582212208e5c31132eea28832f5d8b7ea42249a2950f5dd49eef281f101ce80fa53d1edc64736f6c63430008180033';

type UsePermitTransfersMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UsePermitTransfersMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UsePermitTransfersMock__factory extends ContractFactory {
  constructor(...args: UsePermitTransfersMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UsePermitTransfersMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UsePermitTransfersMock__factory {
    return super.connect(runner) as UsePermitTransfersMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UsePermitTransfersMockInterface {
    return new Interface(_abi) as UsePermitTransfersMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UsePermitTransfersMock {
    return new Contract(address, _abi, runner) as unknown as UsePermitTransfersMock;
  }
}
