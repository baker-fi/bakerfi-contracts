/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  UseTokenActionsMock,
  UseTokenActionsMockInterface,
} from "../../../../../contracts/core/hooks/UseTokenActions.sol/UseTokenActionsMock";

const _abi = [
  {
    inputs: [],
    name: "InvalidRecipient",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidToken",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "SweepFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "test__pullToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "test__pullTokenFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "test__pushToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "test__pushTokenFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "test__sweepNative",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "test__sweepTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b1a806100206000396000f3fe6080604052600436106100595760003560e01c806374ebcfa21461006557806375982a9c146100975780637bf1a41c146100b9578063b8d620bb146100d9578063e714e093146100f9578063e9cc68c11461011957600080fd5b3661006057005b600080fd5b34801561007157600080fd5b5061008561008036600461091b565b610139565b60405190815260200160405180910390f35b3480156100a357600080fd5b506100b76100b2366004610954565b61014e565b005b3480156100c557600080fd5b506100856100d4366004610995565b61015e565b3480156100e557600080fd5b506100b76100f43660046109b9565b610169565b34801561010557600080fd5b506100b76101143660046109e5565b610177565b34801561012557600080fd5b506100b7610134366004610954565b610189565b60006101458383610194565b90505b92915050565b610159838383610262565b505050565b6000610148826102c4565b6101738282610370565b5050565b6101838484848461043b565b50505050565b610159838383610530565b60006001600160a01b0383166101bd5760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b0382166101e457604051634e46966960e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c9190610a36565b90506101486001600160a01b03841683836105fe565b6001600160a01b0383166102895760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b0382166102b057604051634e46966960e11b815260040160405180910390fd5b6101596001600160a01b03841683836105fe565b60006001600160a01b0382166102ed57604051634e46966960e11b815260040160405180910390fd5b5047801561036b576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610342576040519150601f19603f3d011682016040523d82523d6000602084013e610347565b606091505b5050905080610369576040516313dd85ff60e31b815260040160405180910390fd5b505b919050565b6001600160a01b0382166103975760405163c1ab6dc160e01b815260040160405180910390fd5b604051636eb1769f60e11b815233600482015230602482015281906001600160a01b0384169063dd62ed3e90604401602060405180830381865afa1580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104079190610a36565b101561042657604051634fd3af0760e01b815260040160405180910390fd5b6101736001600160a01b038316333084610661565b6001600160a01b0384166104625760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b03821661048957604051634e46966960e11b815260040160405180910390fd5b604051636eb1769f60e11b81526001600160a01b03848116600483015230602483015282919086169063dd62ed3e90604401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190610a36565b101561051b57604051634fd3af0760e01b815260040160405180910390fd5b6101836001600160a01b038516848484610661565b6001600160a01b0383166105575760405163c1ab6dc160e01b815260040160405180910390fd5b604051636eb1769f60e11b81526001600160a01b03838116600483015230602483015282919085169063dd62ed3e90604401602060405180830381865afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190610a36565b10156105e957604051634fd3af0760e01b815260040160405180910390fd5b6101596001600160a01b038416833084610661565b6040516001600160a01b03831660248201526044810182905261015990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610699565b6040516001600160a01b03808516602483015283166044820152606481018290526101839085906323b872dd60e01b9060840161062a565b60006106ee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107739092919063ffffffff16565b905080516000148061070f57508080602001905181019061070f9190610a4f565b6101595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610782848460008561078a565b949350505050565b6060824710156107eb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161076a565b600080866001600160a01b031685876040516108079190610a95565b60006040518083038185875af1925050503d8060008114610844576040519150601f19603f3d011682016040523d82523d6000602084013e610849565b606091505b509150915061085a87838387610865565b979650505050505050565b606083156108d45782516000036108cd576001600160a01b0385163b6108cd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161076a565b5081610782565b61078283838151156108e95781518083602001fd5b8060405162461bcd60e51b815260040161076a9190610ab1565b6001600160a01b038116811461091857600080fd5b50565b6000806040838503121561092e57600080fd5b823561093981610903565b9150602083013561094981610903565b809150509250929050565b60008060006060848603121561096957600080fd5b833561097481610903565b9250602084013561098481610903565b929592945050506040919091013590565b6000602082840312156109a757600080fd5b81356109b281610903565b9392505050565b600080604083850312156109cc57600080fd5b82356109d781610903565b946020939093013593505050565b600080600080608085870312156109fb57600080fd5b8435610a0681610903565b93506020850135610a1681610903565b92506040850135610a2681610903565b9396929550929360600135925050565b600060208284031215610a4857600080fd5b5051919050565b600060208284031215610a6157600080fd5b815180151581146109b257600080fd5b60005b83811015610a8c578181015183820152602001610a74565b50506000910152565b60008251610aa7818460208701610a71565b9190910192915050565b6020815260008251806020840152610ad0816040850160208701610a71565b601f01601f1916919091016040019291505056fea2646970667358221220d7ede7f13ce1fd39fdb4ec6337c7e2e60d8722b9b9bd58c7fdf22287ae156fce64736f6c63430008180033";

type UseTokenActionsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UseTokenActionsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UseTokenActionsMock__factory extends ContractFactory {
  constructor(...args: UseTokenActionsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UseTokenActionsMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): UseTokenActionsMock__factory {
    return super.connect(runner) as UseTokenActionsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UseTokenActionsMockInterface {
    return new Interface(_abi) as UseTokenActionsMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UseTokenActionsMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as UseTokenActionsMock;
  }
}
