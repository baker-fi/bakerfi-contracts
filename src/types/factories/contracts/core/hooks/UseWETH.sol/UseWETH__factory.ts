/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  UseWETH,
  UseWETHInterface,
} from "../../../../../contracts/core/hooks/UseWETH.sol/UseWETH";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ETHTransferNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientWETHBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWETHAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWETHContract",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

export class UseWETH__factory {
  static readonly abi = _abi;
  static createInterface(): UseWETHInterface {
    return new Interface(_abi) as UseWETHInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UseWETH {
    return new Contract(address, _abi, runner) as unknown as UseWETH;
  }
}
