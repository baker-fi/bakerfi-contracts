/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  UseWETHMock,
  UseWETHMockInterface,
} from "../../../../../contracts/core/hooks/UseWETH.sol/UseWETHMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ETHTransferNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientWETHBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWETHAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWETHContract",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wETHAmount",
        type: "uint256",
      },
    ],
    name: "test__unwrapETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "test__wrapETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506104aa806100206000396000f3fe6080604052600436106100385760003560e01c80630a2e007014610044578063c4d66de814610066578063edccc0971461008657600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f366004610412565b6100a6565b005b34801561007257600080fd5b5061006461008136600461042b565b6100b2565b34801561009257600080fd5b506100646100a1366004610412565b6101ca565b6100af816101d3565b50565b600054610100900460ff16158080156100d25750600054600160ff909116105b806100ec5750303b1580156100ec575060005460ff166001145b6101545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610177576000805461ff0019166101001790555b6101808261025c565b80156101c6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6100af81610311565b804710156101f4576040516393116e7160e01b815260040160405180910390fd5b6000546201000090046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561024057600080fd5b505af1158015610254573d6000803e3d6000fd5b505050505050565b600054610100900460ff166102c75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161014b565b6000805462010000600160b01b031916620100006001600160a01b0384811682029290921792839055909104166100af576040516332a1e6cf60e21b815260040160405180910390fd5b80600003610332576040516393116e7160e01b815260040160405180910390fd5b600080546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a4919061045b565b9050818110156103c75760405163ea920f3760e01b815260040160405180910390fd5b600054604051632e1a7d4d60e01b815260048101849052620100009091046001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561024057600080fd5b60006020828403121561042457600080fd5b5035919050565b60006020828403121561043d57600080fd5b81356001600160a01b038116811461045457600080fd5b9392505050565b60006020828403121561046d57600080fd5b505191905056fea2646970667358221220c1d1f4bbc8eaeb7edae0ff3805df9d9bc374d52d29912b459368855955b2d9ce64736f6c63430008180033";

type UseWETHMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UseWETHMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UseWETHMock__factory extends ContractFactory {
  constructor(...args: UseWETHMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UseWETHMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UseWETHMock__factory {
    return super.connect(runner) as UseWETHMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UseWETHMockInterface {
    return new Interface(_abi) as UseWETHMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UseWETHMock {
    return new Contract(address, _abi, runner) as unknown as UseWETHMock;
  }
}
