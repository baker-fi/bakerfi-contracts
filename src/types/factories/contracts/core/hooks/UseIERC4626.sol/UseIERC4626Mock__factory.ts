/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  UseIERC4626Mock,
  UseIERC4626MockInterface,
} from "../../../../../contracts/core/hooks/UseIERC4626.sol/UseIERC4626Mock";

const _abi = [
  {
    inputs: [],
    name: "CallerNotTheGovernor",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedToApproveAllowanceForVault",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidGovernorAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidVaultAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "SlippageTooHigh",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousGovernor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGovernor",
        type: "address",
      },
    ],
    name: "GovernshipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC4626",
        name: "vault",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "approveTokenForVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC4626",
        name: "vault",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "isTokenApprovedForVault",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC4626",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "assets",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minShares",
        type: "uint256",
      },
    ],
    name: "test__depositVault",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC4626",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxAssets",
        type: "uint256",
      },
    ],
    name: "test__mintVault",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC4626",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minAssets",
        type: "uint256",
      },
    ],
    name: "test__redeemVault",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC4626",
        name: "vault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "assets",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxShares",
        type: "uint256",
      },
    ],
    name: "test__withdrawVault",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newGovernor",
        type: "address",
      },
    ],
    name: "transferGovernorship",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC4626",
        name: "vault",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "unapproveTokenForVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610be7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638e791f751161008c578063b26c9b9211610066578063b26c9b92146101d2578063b6aa515b146101e5578063c4d66de8146101f8578063f2fde38b1461020b57600080fd5b80638e791f7514610160578063953d4da014610173578063ae7d2e3c1461018657600080fd5b80630c340a24146100d45780630cac6925146100fe57806339bc9c5c1461011f5780635fefe72f14610134578063715018a6146101475780638da5cb5b1461014f575b600080fd5b6065546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61011161010c366004610a76565b61021e565b6040519081526020016100f5565b61013261012d366004610abe565b610237565b005b610111610142366004610a76565b610320565b61013261032e565b6033546001600160a01b03166100e1565b61013261016e366004610abe565b610342565b610111610181366004610af7565b6103c4565b6101c2610194366004610abe565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b60405190151581526020016100f5565b6101116101e0366004610af7565b6103df565b6101326101f3366004610b52565b6103ee565b610132610206366004610b52565b61044c565b610132610219366004610b52565b610563565b600061022c858585856105d9565b90505b949350505050565b6065546001600160a01b031633146102625760405163e6e025c760e01b815260040160405180910390fd5b6001600160a01b0382811660008181526066602090815260408083209486168084529490915290819020805460ff191660011790555163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044015b6020604051808303816000875af11580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610b76565b61031c576040516376e540db60e01b815260040160405180910390fd5b5050565b600061022c85858585610698565b610336610757565b61034060006107b1565b565b6065546001600160a01b0316331461036d5760405163e6e025c760e01b815260040160405180910390fd5b6001600160a01b03828116600081815260666020908152604080832094861680845294909152808220805460ff191690555163095ea7b360e01b81526004810192909252602482015263095ea7b3906044016102bc565b60006103d38686868686610803565b90505b95945050505050565b60006103d386868686866108ca565b6065546001600160a01b031633146104195760405163e6e025c760e01b815260040160405180910390fd5b6001600160a01b0381166104405760405163fa68714160e01b815260040160405180910390fd5b61044981610991565b50565b600054610100900460ff161580801561046c5750600054600160ff909116105b806104865750303b158015610486575060005460ff166001145b6104ee5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610511576000805461ff0019166101001790555b61051a826109ed565b801561031c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b61056b610757565b6001600160a01b0381166105d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104e5565b610449816107b1565b60006001600160a01b03851661060257604051630306120160e01b815260040160405180910390fd5b604051636e553f6560e01b8152600481018590526001600160a01b038481166024830152861690636e553f65906044016020604051808303816000875af1158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190610b98565b90508181101561022f5760405163428637bb60e11b815260040160405180910390fd5b60006001600160a01b0385166106c157604051630306120160e01b815260040160405180910390fd5b6040516394bf804d60e01b8152600481018590526001600160a01b0384811660248301528616906394bf804d906044016020604051808303816000875af1158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190610b98565b90508181111561022f5760405163428637bb60e11b815260040160405180910390fd5b6033546001600160a01b031633146103405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b03861661082c57604051630306120160e01b815260040160405180910390fd5b604051635d043b2960e11b8152600481018690526001600160a01b038581166024830152848116604483015287169063ba087652906064016020604051808303816000875af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190610b98565b9050818110156103d65760405163428637bb60e11b815260040160405180910390fd5b60006001600160a01b0386166108f357604051630306120160e01b815260040160405180910390fd5b604051632d182be560e21b8152600481018690526001600160a01b038581166024830152848116604483015287169063b460af94906064016020604051808303816000875af115801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190610b98565b9050818111156103d65760405163428637bb60e11b815260040160405180910390fd5b6065546040516001600160a01b038084169216907f4a2da5517922d469e27cc43b2e88ebd65d79400caf5bb7cc34419e64cf85bb1a90600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16610a585760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104e5565b610440816107b1565b6001600160a01b038116811461044957600080fd5b60008060008060808587031215610a8c57600080fd5b8435610a9781610a61565b9350602085013592506040850135610aae81610a61565b9396929550929360600135925050565b60008060408385031215610ad157600080fd5b8235610adc81610a61565b91506020830135610aec81610a61565b809150509250929050565b600080600080600060a08688031215610b0f57600080fd5b8535610b1a81610a61565b9450602086013593506040860135610b3181610a61565b92506060860135610b4181610a61565b949793965091946080013592915050565b600060208284031215610b6457600080fd5b8135610b6f81610a61565b9392505050565b600060208284031215610b8857600080fd5b81518015158114610b6f57600080fd5b600060208284031215610baa57600080fd5b505191905056fea2646970667358221220a01b35843080f284a4904d3ca662953f70b6306bccc71438d405497525312f3a64736f6c63430008180033";

type UseIERC4626MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UseIERC4626MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UseIERC4626Mock__factory extends ContractFactory {
  constructor(...args: UseIERC4626MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UseIERC4626Mock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UseIERC4626Mock__factory {
    return super.connect(runner) as UseIERC4626Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UseIERC4626MockInterface {
    return new Interface(_abi) as UseIERC4626MockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UseIERC4626Mock {
    return new Contract(address, _abi, runner) as unknown as UseIERC4626Mock;
  }
}
