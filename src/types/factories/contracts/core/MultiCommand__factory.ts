/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  MultiCommand,
  MultiCommandInterface,
} from "../../../contracts/core/MultiCommand";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "commandIndex",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "ExecutionFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "action",
        type: "uint256",
      },
    ],
    name: "InvalidCommand",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "action",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Command[]",
        name: "commands",
        type: "tuple[]",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class MultiCommand__factory {
  static readonly abi = _abi;
  static createInterface(): MultiCommandInterface {
    return new Interface(_abi) as MultiCommandInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MultiCommand {
    return new Contract(address, _abi, runner) as unknown as MultiCommand;
  }
}
