/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  CurveFiLibrary,
  CurveFiLibraryInterface,
} from '../../../contracts/libraries/CurveFiLibrary';

const _abi = [
  {
    inputs: [],
    name: 'InsufficientBalance',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidFeeTier',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidV2RouterContract',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidV3RouterContract',
    type: 'error',
  },
  {
    inputs: [],
    name: 'UnsupportedSwapType',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ETH_ADDRESS',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60a4610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063a734f06e146038575b600080fd5b605273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b03909116815260200160405180910390f3fea2646970667358221220d5d5312df45dda6d3f12c41eb5ff5b8a64f1bfc3537bc2ec7518b66f0fe00d3d64736f6c63430008180033';

type CurveFiLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveFiLibraryConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveFiLibrary__factory extends ContractFactory {
  constructor(...args: CurveFiLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CurveFiLibrary & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CurveFiLibrary__factory {
    return super.connect(runner) as CurveFiLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveFiLibraryInterface {
    return new Interface(_abi) as CurveFiLibraryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): CurveFiLibrary {
    return new Contract(address, _abi, runner) as unknown as CurveFiLibrary;
  }
}
