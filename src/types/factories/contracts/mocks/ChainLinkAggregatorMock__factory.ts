/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  ChainLinkAggregatorMock,
  ChainLinkAggregatorMockInterface,
} from '../../../contracts/mocks/ChainLinkAggregatorMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'roundId',
        type: 'uint256',
      },
    ],
    name: 'getAnswer',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'roundId',
        type: 'uint256',
      },
    ],
    name: 'getTimestamp',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'latestAnswer',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'latestRound',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'latestRoundData',
    outputs: [
      {
        internalType: 'uint80',
        name: 'roundId',
        type: 'uint80',
      },
      {
        internalType: 'int256',
        name: 'answer',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'startedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'updatedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint80',
        name: 'answeredInRound',
        type: 'uint80',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'latestTimestamp',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'ldecimals',
        type: 'uint8',
      },
    ],
    name: 'setDecimals',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'exchangeRate',
        type: 'uint256',
      },
    ],
    name: 'setLatestPrice',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040526002805460ff1916600617905534801561001d57600080fd5b50426001556002546100339060ff16600a610143565b61003f90610dac610159565b600055610170565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561009857816000190482111561007e5761007e610047565b8085161561008b57918102915b93841c9390800290610062565b509250929050565b6000826100af5750600161013d565b816100bc5750600061013d565b81600181146100d257600281146100dc576100f8565b600191505061013d565b60ff8411156100ed576100ed610047565b50506001821b61013d565b5060208310610133831016604e8410600b841016171561011b575081810a61013d565b610125838361005d565b806000190482111561013957610139610047565b0290505b92915050565b600061015260ff8416836100a0565b9392505050565b808202811582820484141761013d5761013d610047565b6101e38061017f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638205bf6a116100665780638205bf6a146100f1578063b5ab58dc146100f9578063b633620c1461010e578063fc9bb7fe14610123578063feaf968c1461013a57600080fd5b8063313ce5671461009857806350d25bcd146100b2578063668a0f02146100c45780637a1395aa146100cb575b600080fd5b60025460405160ff90911681526020015b60405180910390f35b6000545b6040519081526020016100a9565b60006100b6565b6100ef6100d936600461016a565b6002805460ff191660ff92909216919091179055565b005b6001546100b6565b6100b6610107366004610194565b5060005490565b6100b661011c366004610194565b5060015490565b6100ef610131366004610194565b60005542600155565b6000805460015460408051848152602081019390935282018190526060820152608081019190915260a0016100a9565b60006020828403121561017c57600080fd5b813560ff8116811461018d57600080fd5b9392505050565b6000602082840312156101a657600080fd5b503591905056fea26469706673582212201309e2f87e5d8d9ca51440d5a0626284e3a180b307af1790c64114c56ebf2e3564736f6c63430008180033';

type ChainLinkAggregatorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainLinkAggregatorMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainLinkAggregatorMock__factory extends ContractFactory {
  constructor(...args: ChainLinkAggregatorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ChainLinkAggregatorMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ChainLinkAggregatorMock__factory {
    return super.connect(runner) as ChainLinkAggregatorMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainLinkAggregatorMockInterface {
    return new Interface(_abi) as ChainLinkAggregatorMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ChainLinkAggregatorMock {
    return new Contract(address, _abi, runner) as unknown as ChainLinkAggregatorMock;
  }
}
