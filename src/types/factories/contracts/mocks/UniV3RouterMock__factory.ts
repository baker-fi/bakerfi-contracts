/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  UniV3RouterMock,
  UniV3RouterMockInterface,
} from '../../../contracts/mocks/UniV3RouterMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: 'asset0',
        type: 'address',
      },
      {
        internalType: 'contract IERC20',
        name: 'asset1',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'path',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOutMinimum',
            type: 'uint256',
          },
        ],
        internalType: 'struct IV3SwapRouter.ExactInputParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactInput',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenOut',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'fee',
            type: 'uint24',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOutMinimum',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
          },
        ],
        internalType: 'struct IV3SwapRouter.ExactInputSingleParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactInputSingle',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'path',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountInMaximum',
            type: 'uint256',
          },
        ],
        internalType: 'struct IV3SwapRouter.ExactOutputParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactOutput',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenOut',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'fee',
            type: 'uint24',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountInMaximum',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
          },
        ],
        internalType: 'struct IV3SwapRouter.ExactOutputSingleParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactOutputSingle',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPrice',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'price',
        type: 'uint256',
      },
    ],
    name: 'setPrice',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'amount0Delta',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'amount1Delta',
        type: 'int256',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'uniswapV3SwapCallback',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x6080604052633b9aca00600255633b9aca0060035534801561002057600080fd5b50604051610c8c380380610c8c83398101604081905261003f9161008c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100bf565b80516001600160a01b038116811461008757600080fd5b919050565b6000806040838503121561009f57600080fd5b6100a883610070565b91506100b660208401610070565b90509250929050565b610bbe806100ce6000396000f3fe6080604052600436106100705760003560e01c806391b7f5ed1161004e57806391b7f5ed146100c157806398d5fdca146100e3578063b858183f1461009a578063fa461e33146100f857600080fd5b806304e45aaf1461007557806309b813461461009a5780635023b4df146100ae575b600080fd5b610088610083366004610961565b610119565b60405190815260200160405180910390f35b6100886100a8366004610996565b50600090565b6100886100bc366004610961565b6103c3565b3480156100cd57600080fd5b506100e16100dc3660046109cb565b600355565b005b3480156100ef57600080fd5b50600354610088565b34801561010457600080fd5b506100e16101133660046109e4565b50505050565b6000806101296020840184610a64565b604051636eb1769f60e11b81523360048201523060248201526001600160a01b03919091169063dd62ed3e90604401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610a8d565b10156101e25760405162461bcd60e51b81526020600482015260136024820152724e6f20456e6f75676820416c6c6f77616e636560681b60448201526064015b60405180910390fd5b61020a333060808501356101f96020870187610a64565b6001600160a01b0316929190610644565b6001546001600160a01b03166102236020840184610a64565b6001600160a01b03160361025657600354600254610245906080850135610aa6565b61024f9190610ad1565b9050610277565b60025460035461026a906080850135610aa6565b6102749190610ad1565b90505b806102886040840160208501610a64565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f29190610a8d565b10156103365760405162461bcd60e51b81526020600482015260136024820152724e6f20456e6f756768204c697175696469747960681b60448201526064016101d9565b8160a0013581101561038a5760405162461bcd60e51b815260206004820152601760248201527f4d696e696e756d204f7574206e6f74207265616368656400000000000000000060448201526064016101d9565b6103be61039d6080840160608501610a64565b826103ae6040860160208701610a64565b6001600160a01b031691906106af565b919050565b600060808201356103da6040840160208501610a64565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190610a8d565b10156104885760405162461bcd60e51b81526020600482015260136024820152724e6f20656e6f756768206c697175696469747960681b60448201526064016101d9565b6000546001600160a01b03166104a16020840184610a64565b6001600160a01b0316036104d4576003546002546104c3906080850135610aa6565b6104cd9190610ad1565b90506104f5565b6002546003546104e8906080850135610aa6565b6104f29190610ad1565b90505b8160a0013581111561053d5760405162461bcd60e51b815260206004820152601160248201527013585e08125b9c1d5d0814995858da1959607a1b60448201526064016101d9565b8061054b6020840184610a64565b604051636eb1769f60e11b81523360048201523060248201526001600160a01b03919091169063dd62ed3e90604401602060405180830381865afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190610a8d565b10156106095760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420616c6c6f77656420746f206d6f766520696e7075742000000000000060448201526064016101d9565b61061c3330836101f96020870187610a64565b6103be61062f6080840160608501610a64565b60808401356103ae6040860160208701610a64565b6040516001600160a01b03808516602483015283166044820152606481018290526101139085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106e4565b6040516001600160a01b0383166024820152604481018290526106df90849063a9059cbb60e01b90606401610678565b505050565b6000610739826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107b99092919063ffffffff16565b905080516000148061075a57508080602001905181019061075a9190610af3565b6106df5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101d9565b60606107c884846000856107d0565b949350505050565b6060824710156108315760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101d9565b600080866001600160a01b0316858760405161084d9190610b39565b60006040518083038185875af1925050503d806000811461088a576040519150601f19603f3d011682016040523d82523d6000602084013e61088f565b606091505b50915091506108a0878383876108ab565b979650505050505050565b6060831561091a578251600003610913576001600160a01b0385163b6109135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101d9565b50816107c8565b6107c8838381511561092f5781518083602001fd5b8060405162461bcd60e51b81526004016101d99190610b55565b600060e0828403121561095b57600080fd5b50919050565b600060e0828403121561097357600080fd5b61097d8383610949565b9392505050565b60006080828403121561095b57600080fd5b6000602082840312156109a857600080fd5b813567ffffffffffffffff8111156109bf57600080fd5b6107c884828501610984565b6000602082840312156109dd57600080fd5b5035919050565b600080600080606085870312156109fa57600080fd5b8435935060208501359250604085013567ffffffffffffffff80821115610a2057600080fd5b818701915087601f830112610a3457600080fd5b813581811115610a4357600080fd5b886020828501011115610a5557600080fd5b95989497505060200194505050565b600060208284031215610a7657600080fd5b81356001600160a01b038116811461097d57600080fd5b600060208284031215610a9f57600080fd5b5051919050565b8082028115828204841417610acb57634e487b7160e01b600052601160045260246000fd5b92915050565b600082610aee57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610b0557600080fd5b8151801515811461097d57600080fd5b60005b83811015610b30578181015183820152602001610b18565b50506000910152565b60008251610b4b818460208701610b15565b9190910192915050565b6020815260008251806020840152610b74816040850160208701610b15565b601f01601f1916919091016040019291505056fea26469706673582212207d7748a47585bc43c9169f9000da1bd886e5efe077ceb3cbceebbd20c92ae5af64736f6c63430008180033';

type UniV3RouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniV3RouterMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniV3RouterMock__factory extends ContractFactory {
  constructor(...args: UniV3RouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    asset0: AddressLike,
    asset1: AddressLike,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(asset0, asset1, overrides || {});
  }
  override deploy(
    asset0: AddressLike,
    asset1: AddressLike,
    overrides?: NonPayableOverrides & { from?: string },
  ) {
    return super.deploy(asset0, asset1, overrides || {}) as Promise<
      UniV3RouterMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UniV3RouterMock__factory {
    return super.connect(runner) as UniV3RouterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniV3RouterMockInterface {
    return new Interface(_abi) as UniV3RouterMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UniV3RouterMock {
    return new Contract(address, _abi, runner) as unknown as UniV3RouterMock;
  }
}
